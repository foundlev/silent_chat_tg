import asyncio
import sys
import random

import logging

from aiogram import Bot, Dispatcher, types, executor
import datetime

import entities
import keyboards
import tg
import db
import config
import utils

logging.basicConfig(level=logging.INFO, filename=config.LOG_FILENAME)

bot = Bot(token=config.BOT_TOKEN)
dp = Dispatcher(bot)
storage = db.Storage(dp.loop)
temp_storage = entities.TempStorage()
lock_market = asyncio.Lock()

BOT_PROFILE: types.User
COMMANDS = ["start", "help", "hug", "bank", "unbank", "mybank", "coins", "users", "send", "tasks",
            "report", "fees", "top", "worst", "stop", "test", "topbanks", "casino",
            "sell", "buy", "market", "deletereports", "myid", "profile",
            "creategroup", "mygroup", "renamegroup", "invite", "grouptax", "removemember", "sendcrystals",
            "hack", "anoncode", "msg", "changebank", "ad", "random"]
HTML = "html"


@dp.message_handler(commands=COMMANDS, content_types=types.ContentTypes.TEXT)
async def message_func(message: types.Message):
    try:
        if message.from_user.id in config.IGNORED_IDS:
            return

        utils.convert_command(message)

        cm, *args = message.text.split()
        user = entities.User(storage, **utils.unpack_message(message))

        if user.user_id == config.ANON_BOT_ID:
            return

        await user.load_from_db()

        availability = await tg.check_availability(bot, message, user)
        if not availability.result:
            if availability.delete:
                await message.delete()
            return

        await user.update()

        if cm in ('/start', '/help', '/fees'):
            await tg.help_menu(message)

        # –ü–æ–¥–∞—á–∞ –∂–∞–ª–æ–±—ã –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        elif cm == "/report":
            if message.reply_to_message:
                args = [message.reply_to_message.from_user.id]

            if not args:
                text = ("‚ùå <b>–ö–æ–º–∞–Ω–¥–∞ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ</b>\n"
                        "<u>–û–ø–∏—Å–∞–Ω–∏–µ:</u> –û—Ç–ø—Ä–∞–≤–∫–∞ –∂–∞–ª–æ–±—ã –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∏–∫ / ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è "
                        "–∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –∫–æ–º–∞–Ω–¥–æ–π –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n"
                        "<u>–ö–æ–º–∞–Ω–¥–∞:</u> <code>/report [–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å]</code>")
                await message.answer(text, parse_mode=HTML)
                return

            await tg.process_report(message, user, args, bot_profile=BOT_PROFILE)

        # –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è.
        elif cm == "/tasks":
            await tg.show_tasks(message, user)

        # –ö–∞–∑–∏–Ω–æ.
        elif cm == "/casino":
            if not args:
                text = ("‚ùå <b>–ö–æ–º–∞–Ω–¥–∞ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ</b>\n"
                        "<u>–û–ø–∏—Å–∞–Ω–∏–µ:</u> –ò–≥—Ä–∞ –Ω–∞ —É–¥–∞—á—É –≤ –∫–∞–∑–∏–Ω–æ. –ü—Ä–∏ –≤–≤–æ–¥–µ –∫–æ–º–∞–Ω–¥—ã –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —Å—Ç–∞–≤–∫—É –≤ –º–æ–Ω–µ—Ç–∫–∞—Ö."
                        " –ß–µ–º –≤—ã—à–µ —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∏–≥—Ä—ã, —Ç–µ–º –±–æ–ª—å—à–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à –∏ –º–µ–Ω—å—à–µ –µ–≥–æ —à–∞–Ω—Å.\n"
                        "<u>–ö–æ–º–∞–Ω–¥–∞:</u> <code>/casino [—Å—Ç–∞–≤–∫–∞ –≤ –º–æ–Ω–µ—Ç–∫–∞—Ö]</code>")
                await message.answer(text, parse_mode=HTML)
                return

            await tg.show_casino(message, user)

        # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã.
        elif cm == "/creategroup":
            if not args:
                text = ("‚ùå <b>–ö–æ–º–∞–Ω–¥–∞ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ</b>\n"
                        "<u>–û–ø–∏—Å–∞–Ω–∏–µ:</u> –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É, –≤ –∫–æ—Ç–æ—Ä–æ–π –≤—ã —Å—Ä–∞–∑—É —Å—Ç–∞–Ω–µ—Ç–µ –ª–∏–¥–µ—Ä–æ–º.\n"
                        "<u>–ö–æ–º–∞–Ω–¥–∞:</u> <code>/creategroup [–Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã]</code>")
                await message.answer(text, parse_mode=HTML)
                return
            await tg.show_group_creating(message, user)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤—Å—Ç—É–ø–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É.
        elif cm == "/invite":
            if not args and not message.reply_to_message:
                text = ("‚ùå <b>–ö–æ–º–∞–Ω–¥–∞ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ</b>\n"
                        "<u>–û–ø–∏—Å–∞–Ω–∏–µ:</u> –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —É–∫–∞–∑–∞–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.\n"
                        "<u>–ö–æ–º–∞–Ω–¥–∞:</u> <code>/invite [–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å]</code>")
                await message.answer(text, parse_mode=HTML)
                return
            await tg.show_group_inviting(message, user, BOT_PROFILE)

        # –ü—Ä–æ—Å–º–æ—Ç—Ä –≥—Ä—É–ø–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        elif cm == "/mygroup":
            await tg.show_user_group(message, user)

        elif cm == "/renamegroup":
            if not args:
                text = ("‚ùå <b>–ö–æ–º–∞–Ω–¥–∞ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ</b>\n"
                        "<u>–û–ø–∏—Å–∞–Ω–∏–µ:</u> –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Å–≤–æ–µ–π –≥—Ä—É–ø–ø—ã.\n"
                        "<u>–ö–æ–º–∞–Ω–¥–∞:</u> <code>/renamegroup [–Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ]</code>")
                await message.answer(text, parse_mode=HTML)
                return
            await tg.rename_group(message, user)

        # –£–¥–∞–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ –≥—Ä—É–ø–ø—ã.
        elif cm == "/removemember":
            if not args and not message.reply_to_message:
                text = ("‚ùå <b>–ö–æ–º–∞–Ω–¥–∞ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ</b>\n"
                        "<u>–û–ø–∏—Å–∞–Ω–∏–µ:</u> –£–¥–∞–ª—è–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ –≥—Ä—É–ø–ø—ã.\n"
                        "<u>–ö–æ–º–∞–Ω–¥–∞:</u> <code>/removemember [–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å]</code>")
                await message.answer(text, parse_mode=HTML)
                return
            await tg.removing_user_from_group(message, user, BOT_PROFILE)

        # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—É–º–º—ã –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –≤–∑–Ω–æ—Å–∞.
        elif cm == "/grouptax":
            if not args:
                text = ("‚ùå <b>–ö–æ–º–∞–Ω–¥–∞ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ</b>\n"
                        "<u>–û–ø–∏—Å–∞–Ω–∏–µ:</u> –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—É–º–º—É –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –≤–∑–Ω–æ—Å–∞ –≤ –º–æ–Ω–µ—Ç–∫–∞—Ö –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã.\n"
                        "<u>–ö–æ–º–∞–Ω–¥–∞:</u> <code>/grouptax [—Å—É–º–º–∞ –≤ –º–æ–Ω–µ—Ç–∫–∞—Ö]</code>")
                await message.answer(text, parse_mode=HTML)
                return
            await tg.group_tax_control(message, user)

        # –í—ã—Å—Ç–∞–≤–∏—Ç—å –∫—Ä–∏—Å—Ç–∞–ª–ª—ã –Ω–∞ –ø—Ä–æ–¥–∞–∂—É.
        elif cm == "/sell":
            if len(args) != 2:
                text = ("‚ùå <b>–ö–æ–º–∞–Ω–¥–∞ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ</b>\n"
                        "<u>–û–ø–∏—Å–∞–Ω–∏–µ:</u> –í—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –±–∏—Ä–∂—É –∫–∞–∫–æ–µ-—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤ –ø–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —Ü–µ–Ω–µ.\n"
                        "<u>–ö–æ–º–∞–Ω–¥–∞:</u> <code>/sell [–∫–æ–ª-–≤–æ –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤] [—Ü–µ–Ω–∞ –∑–∞ 1 –∫—Ä–∏—Å—Ç–∞–ª–ª]</code>")
                await message.answer(text, parse_mode=HTML)
                return
            await tg.process_market_command(message, user)

        # –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –ø–æ–∫—É–ø–∫—É –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤.
        elif cm == "/buy":
            if len(args) != 2:
                text = ("‚ùå <b>–ö–æ–º–∞–Ω–¥–∞ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ</b>\n"
                        "<u>–û–ø–∏—Å–∞–Ω–∏–µ:</u> –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –ø–æ–∫—É–ø–∫—É –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤ –Ω–∞ –±–∏—Ä–∂–µ "
                        "–ø–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —Ü–µ–Ω–µ.\n"
                        "<u>–ö–æ–º–∞–Ω–¥–∞:</u> <code>/buy [–∫–æ–ª-–≤–æ –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤] [—Ü–µ–Ω–∞ –∑–∞ –æ–¥–∏–Ω]</code>")
                await message.answer(text, parse_mode=HTML)
                return
            await tg.process_market_command(message, user)

        # –û—Ç–∫—Ä—ã—Ç—å –±–∏—Ä–∂—É –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤.
        elif cm == "/market":
            await tg.show_market(message, user)

        # –£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ä–µ–ø–æ—Ä—Ç—ã.
        elif cm == "/deletereports":
            text = ("<b>–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –∂–∞–ª–æ–±—ã –Ω–∞ –≤–∞—Å?</b>\n"
                    f"–°—Ç–æ–∏–º–æ—Å—Ç—å: <b>{config.PRICE_DELETE_REPORTS_CRYSTALS} üíé</b>")
            await message.answer(text, parse_mode=HTML, reply_markup=keyboards.delere_reports_menu(user.user_id))

        # –ë–µ–¥–Ω–µ–π—à–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ –±–∞–ª–∞–Ω—Å—É.
        elif cm == "/worst":
            users_count = await storage.get_users_count(include_muted=True)
            balances = await storage.get_worst_balances()
            balances.reverse()

            text = "ü§ï <b>–°–∞–º—ã–µ –±–µ–¥–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏</b>\n"
            for idx, balance in enumerate(balances):
                place = users_count - len(balances) + idx + 1
                text += f"\n{place}) –ë–∞–ª–∞–Ω—Å: <b>{utils.format_balance(balance)} ü™ô</b>"

            await message.answer(text, parse_mode=HTML)

        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞.
        elif cm == "/stop" and user.user_id == config.ADMIN_ID:
            await message.answer("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ë–æ—Ç–∞")
            dp.stop_polling()
            asyncio.get_event_loop().stop()
            sys.exit()

        # –¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è.
        elif cm == "/test" and user.user_id == config.ADMIN_ID:
            print()

        # –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –±–∞–ª–∞–Ω—Å—É.
        elif cm == "/top":
            balance_task = asyncio.create_task(storage.get_top_balances())
            crystal_balance_task = asyncio.create_task(storage.get_top_crystal_balances())
            total_market_crystals_task = asyncio.create_task(storage.get_market_total_crystals())
            top_groups_task = asyncio.create_task(storage.get_top_groups())

            balances = await balance_task
            crystal_balances = await crystal_balance_task

            total_market_crystals = await total_market_crystals_task
            top_groups = await top_groups_task

            total_balance = int(sum(balances))
            total_top_balance = int(sum(balances[:10]))
            total_crystal_balance = int(sum(crystal_balances))

            existing_crystals = int(total_crystal_balance + total_market_crystals)

            text = "üèÜ <b>–°–∞–º—ã–µ –±–æ–≥–∞—Ç—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏</b>\n\nü™ô <u>–ü–æ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–º –º–æ–Ω–µ—Ç–∫–∞–º</u>"

            for idx, balance in enumerate(balances[:10]):
                formatted_balance = utils.format_balance(utils.round_balance(balance))
                prize = int(balance / total_top_balance * 10_000)
                percentage = int(balance / total_top_balance * 100)
                text += f"\n{idx + 1}) ~<b>{formatted_balance}</b> ({percentage}% - {prize}‚ÇΩ)"

            text += (f"\n–í—Å–µ–≥–æ: <b>{utils.format_balance(total_balance)}</b> ü™ô"
                     f"\n\nüíé <u>–ü–æ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–º –∫—Ä–∏—Å—Ç–∞–ª–ª–∞–º</u>")

            for idx, crystal_balance in enumerate(crystal_balances[:10]):
                percentage_crystals = int(crystal_balance / existing_crystals * 100)
                text += f"\n{idx + 1}) <b>{utils.format_balance(crystal_balance)}</b> ({percentage_crystals}%)"

            text += (f"\n–í—Å–µ–≥–æ: <b>{utils.format_balance(existing_crystals)}</b> üíé"
                     "\n\nüîñ <i>–í —Å–∫–æ–±–∫–∞—Ö –Ω–∞–ø–∏—Å–∞–Ω–∞ —Å—É–º–º–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ –≤—ã–∏–≥—Ä—ã—à–∞ 31 –¥–µ–∫–∞–±—Ä—è 2023 –≥. –¢–û–ü –º–æ–Ω–µ—Ç–æ–∫ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω "
                     "—Å —É—á–µ—Ç–æ–º —Å–±–µ—Ä–µ–∂–µ–Ω–∏–π –Ω–∞ –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö —Å—á–µ—Ç–∞—Ö.</i>")

            text += "\n\nüë• <b>–¢–æ–ø –≤–ª–∏—è—Ç–µ–ª—å–Ω—ã—Ö –≥—Ä—É–ø–ø</b>\n"

            for numb, group in enumerate(top_groups[:5], start=1):
                formatted_group_balance = utils.format_balance(utils.round_balance(group['balance']))
                formatted_group_crystals = utils.format_balance(utils.round_balance(group['crystals']))
                group_name: str = group['caption']
                text += (f"\n{numb}) <b>{group_name.capitalize()}</b> ("
                         f"~<b>{formatted_group_balance}</b> ü™ô, <b>{formatted_group_crystals}</b> üíé)")

            await message.answer(text, parse_mode=HTML)

        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
        elif cm == "/users":
            await tg.show_all_users(message, user)

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ ID.
        elif cm == "/myid":
            text = f"üÜî –í–∞—à ID: <code>{user.user_id}</code>"
            await message.reply(text, parse_mode=HTML)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—ä—è—Ç–∏–π –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
        elif cm == "/hug":
            if not args and not message.reply_to_message:
                await tg.answer_bad_command(message)
                return

            if message.reply_to_message:
                search_text = message.reply_to_message.from_user.id
            else:
                search_text = args[0]
            to_user = await tg.search_user(storage, message, search_text, check_mute=True, bot_profile=BOT_PROFILE)

            if to_user:

                if to_user.user_id == user.user_id:
                    text = "‚ùå –ù–µ–ª—å–∑—è –æ–±–Ω–∏–º–∞—Ç—å —Å–µ–±—è"
                    await message.answer(text)
                    return

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ–±–Ω–∏–º–∞—à–µ–∫.
                last_hug = await storage.last_hug(from_id=user.user_id)
                now_time = datetime.datetime.now()

                if not last_hug or now_time.timestamp() - last_hug.timestamp() > config.COOLDOWN_FROM_HUG:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ–±–Ω–∏–º–∞—à–µ–∫ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
                    last_hug_user = await storage.last_hug_user(from_id=user.user_id, to_id=to_user.user_id)
                    if not (
                            not last_hug_user or now_time.timestamp() - last_hug_user.timestamp() > config.COOLDOWN_FROM_HUG_SAME):
                        time_left = config.COOLDOWN_FROM_HUG_SAME - (now_time.timestamp() - last_hug_user.timestamp())
                        time_left_string = utils.format_time(int(time_left))

                        text = (f"‚ùå <b>–í—ã —É–∂–µ –æ–±–Ω–∏–º–∞–ª–∏ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ–¥–∞–≤–Ω–æ</b>\n"
                                f"–ü–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â–µ {time_left_string}")
                        await message.answer(text, parse_mode=HTML)

                        return

                    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –ë–î –∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –±–∞–ª–∞–Ω—Å –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
                    await storage.add_hug(from_id=user.user_id, from_balance=user.balance, to_id=to_user.user_id)
                    current_hug_reward = utils.calc_hug_reward(user.balance)

                    text = f"<b>üíñ –í—ã –æ–±–Ω—è–ª–∏ –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n{to_user}"
                    await message.answer(text, parse_mode=HTML)

                    text_2 = (f"üíñ <b>–í–∞–º –∫—Ç–æ-—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–ª –æ–±–Ω–∏–º–∞—à–∫–∏</b>\n"
                              f"–ù–∞—á–∏—Å–ª–µ–Ω–æ: <b>{utils.format_balance(current_hug_reward)} ü™ô</b>")
                    try:
                        await bot.send_message(to_user.user_id, text_2, parse_mode=HTML)
                    except:
                        pass

                    if not config.DEBUG_MODE:
                        notif_text = f"üíñ <b>–û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–Ω–∏–º–∞—à–µ–∫</b>\n\n{user}\n\n{to_user}"
                        await tg.notify(bot, notif_text)
                else:
                    time_left = config.COOLDOWN_FROM_HUG - (now_time.timestamp() - last_hug.timestamp())
                    time_left_string = utils.format_time(int(time_left))

                    text = (f"‚ùå <b>–° –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ–±–Ω–∏–º–∞—à–µ–∫ –ø—Ä–æ—à–ª–æ —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ –≤—Ä–µ–º–µ–Ω–∏</b>\n"
                            f"–ü–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â–µ {time_left_string}")
                    await message.answer(text, parse_mode=HTML)

        # –û—Ç–∫—Ä—ã—Ç–∏–µ –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ —Å—á—ë—Ç–∞.
        elif cm == "/bank":
            if not args or not args[0].isdigit():
                text = ("‚ùå <b>–ö–æ–º–∞–Ω–¥–∞ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ</b>\n"
                        "<u>–û–ø–∏—Å–∞–Ω–∏–µ:</u> –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ —Å—á–µ—Ç–∞. –ü–∞—Ä–æ–ª—å, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –ø—Ä–∏–¥—É–º–∞—Ç—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ "
                        "6-—Ç–∏ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª–∏–Ω—É. –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã (a-z) –∏ —Ü–∏—Ñ—Ä—ã. "
                        "–†–µ–≥–∏—Å—Ç—Ä —Å–∏–º–≤–æ–ª–æ–≤ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è.\n"
                        "<u>–ö–æ–º–∞–Ω–¥–∞:</u> <code>/bank [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç–æ–∫] [–ø–∞—Ä–æ–ª—å]</code>")
                await message.answer(text, parse_mode=HTML)
                return

            try:
                amount = int(args[0])
                password = args[1].lower()

                if not (10 <= amount <= config.MAX_INT_UNSIGNED):
                    text = ("‚ùå –ù–µ–ª—å–∑—è –æ—Ç–∫—Ä—ã—Ç—å –±–∞–Ω–∫–æ–≤—Å–∫–∏–π —Å—á–µ—Ç –º–µ–Ω—å—à–µ —á–µ–º –Ω–∞ 10 "
                            "–∏ –±–æ–ª—å—à–µ —á–µ–º –Ω–∞ 4.2 –º–ª—Ä–¥ –º–æ–Ω–µ—Ç–æ–∫")
                    await message.answer(text, parse_mode=HTML)
                    return

                fee_sum = utils.calc_fee(amount, config.FEE_BANK, config.PRICE_BANK)
                amount_with_fee = int(amount + fee_sum)
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å.
                if user.balance >= amount_with_fee:
                    user_banks = await user.get_banks()

                    if len(user_banks) < config.MAX_BANKS_COUNT:
                        if utils.is_text_cleared(password) and len(password) <= 6:
                            try:
                                await storage.create_bank(user, amount, amount_with_fee, password)
                                text = (f"üí∞ <b>–ë–∞–Ω–∫–æ–≤—Å–∫–∏–π —Å—á–µ—Ç —Å–æ–∑–¥–∞–Ω</b>\n"
                                        f"–°—É–º–º–∞: <b>{utils.format_balance(amount)} ü™ô</b>\n"
                                        f"–ü–∞—Ä–æ–ª—å: <tg-spoiler>***{password[-2:]}</tg-spoiler>")
                                await message.answer(text, parse_mode=HTML)

                            except:
                                text = (f"‚ùå –û—à–∏–±–∫–∞ - —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –í–æ–∑–º–æ–∂–Ω–æ —É –∫–æ–≥–æ-—Ç–æ —É–∂–µ –µ—Å—Ç—å –±–∞–Ω–∫–æ–≤—Å–∫–∏–π "
                                        f"—Å—á–µ—Ç —Å —Ç–∞–∫–∏–º –ø–∞—Ä–æ–ª–µ–º.")
                                await message.answer(text)

                        else:
                            text = (f"‚ùå –ü–∞—Ä–æ–ª—å –º–æ–∂–µ—Ç —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ –±—É–∫–≤ –ª–∞—Ç–∏–Ω—Å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞ (abcde...) –∏ "
                                    f"—Ü–∏—Ñ—Ä (0123...) –∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –±–æ–ª—å—à–µ 6-—Ç–∏ —Å–∏–º–≤–æ–ª–æ–≤ –≤ –¥–ª–∏–Ω—É.")
                            await message.answer(text)

                    else:
                        text = (f"‚ùå –ù–µ–ª—å–∑—è —Å–æ–∑–¥–∞—Ç—å –±–æ–ª—å—à–µ {config.MAX_BANKS_COUNT} –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö —Å—á–µ—Ç–æ–≤. \n"
                                f"–û–±–Ω–∞–ª–∏—á—å—Ç–µ –æ–¥–∏–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å—á–µ—Ç, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π.")
                        await message.answer(text)
                else:
                    text = ("‚ùå <b>–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –º–æ–Ω–µ—Ç–æ–∫</b>\n"
                            f"–° —É—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–∏ <b>{config.FEE_BANK}%</b> –≤–∞–º –Ω—É–∂–Ω–æ <b>{utils.format_balance(amount_with_fee)} –º–æ–Ω–µ—Ç–æ–∫</b>\n"
                            f"–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: <b>{utils.format_balance(user.balance)} –º–æ–Ω–µ—Ç–æ–∫</b>")
                    await message.answer(text, parse_mode=HTML)
            except:
                text = (f"‚ùå –û—à–∏–±–∫–∞ - —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–∞—à–µ–π "
                        f"–≤–≤–µ–¥–µ–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã.")
                await message.answer(text)

        elif cm == "/random":
            if not args or not args[0].isdigit() or not (1 < int(args[0]) <= 10_000_000):
                text = ("‚ùå <b>–ö–æ–º–∞–Ω–¥–∞ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ</b>\n"
                        "<u>–û–ø–∏—Å–∞–Ω–∏–µ:</u> –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —á–∏—Å–ª–∞. –ê—é–º–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ "
                        "–æ—Ç 1 –¥–æ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —á–∏—Å–ª–∞. –í–≤–µ–¥–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å "
                        "–±–æ–ª—å—à–µ 1 –∏ –Ω–µ –±–æ–ª—å—à–µ 10 –º–ª–Ω.\n"
                        "<u>–ö–æ–º–∞–Ω–¥–∞:</u> <code>/random [—á–∏—Å–ª–æ]</code>")
                await message.answer(text, parse_mode=HTML, disable_web_page_preview=True)
                return

            upper_number = int(args[0])

            new_number = random.randint(1, upper_number)
            date = datetime.datetime.now().strftime("%H:%M:%S %m.%d.%Y")
            text = (f"üé≤ <b>–ü–æ–ª—É—á–µ–Ω–æ —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ</b>\n"
                    f"–£—Å–ª–æ–≤–∏—è: –æ—Ç <code>1</code> –¥–æ <code>{upper_number}</code>\n"
                    f"<b>–ß–∏—Å–ª–æ:</b> <code>{new_number}</code>\n"
                    f"–î–∞—Ç–∞: <code>{date}</code>")
            await message.answer(text, parse_mode=HTML, disable_web_page_preview=True)

        # –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π.
        elif cm == "/ad":
            ad_text = message.text[4:].replace("<", "").replace(">", "")

            if len(ad_text) > 3000:
                await message.answer("‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏—è - 3000 —Å–∏–º–≤–æ–ª–æ–≤.")
                return

            text = (f"üì¢ <b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–µ–∫—Å—Ç –≤–∞—à–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è</b>\n\n"
                    f"–°—Ç–æ–∏–º–æ—Å—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: <b>{config.PRICE_POST_AD} ü™ô</b>\n\n")
            text += ad_text
            await message.answer(text, parse_mode=HTML, reply_markup=keyboards.post_ad_menu(user.user_id),
                                 disable_web_page_preview=True)

            temp_storage.value(user, "adText", ad_text)

        # –°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—å –Ω–∞ –±–∞–Ω–∫–æ–≤—Å–∫–æ–º —Å—á–µ—Ç–µ.
        elif cm == "/changebank":
            if len(args) != 2:
                text = ("‚ùå <b>–ö–æ–º–∞–Ω–¥–∞ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ</b>\n"
                        "<u>–û–ø–∏—Å–∞–Ω–∏–µ:</u> –°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ —Å—á–µ—Ç–∞.\n"
                        f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {config.PRICE_CHANGE_BANK_CRYSTALS} üíé\n"
                        "<u>–ö–æ–º–∞–Ω–¥–∞:</u> <code>/changebank [—Å—Ç–∞—Ä—ã–π –ø–∞—Ä–æ–ª—å] [–Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å]</code>")
                await message.answer(text, parse_mode=HTML, disable_web_page_preview=True)
                return

            try:
                old_password = args[0].lower()
                new_password = args[1].lower()

                assert user.crystals >= config.PRICE_CHANGE_BANK_CRYSTALS, "–£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤"
                assert utils.is_text_cleared(old_password) and len(old_password) <= 6, (
                    f"–ü–∞—Ä–æ–ª—å –º–æ–∂–µ—Ç —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ –±—É–∫–≤ –ª–∞—Ç–∏–Ω—Å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞ (abcde...) –∏ "
                    f"—Ü–∏—Ñ—Ä (0123...) –∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –±–æ–ª—å—à–µ 6-—Ç–∏ —Å–∏–º–≤–æ–ª–æ–≤ –≤ –¥–ª–∏–Ω—É."
                )
                assert utils.is_text_cleared(new_password) and len(new_password) <= 6, (
                    f"–ü–∞—Ä–æ–ª—å –º–æ–∂–µ—Ç —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ –±—É–∫–≤ –ª–∞—Ç–∏–Ω—Å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞ (abcde...) –∏ "
                    f"—Ü–∏—Ñ—Ä (0123...) –∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –±–æ–ª—å—à–µ 6-—Ç–∏ —Å–∏–º–≤–æ–ª–æ–≤ –≤ –¥–ª–∏–Ω—É."
                )

                fee = utils.calc_fee(user.balance, config.FEE_UNBANK, config.PRICE_UNBANK)
                bank_result = await user.change_bank_password(old_password, new_password, fee)

                if bank_result:
                    text = ("‚òëÔ∏è <b>–ü–∞—Ä–æ–ª—å –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ —Å—á–µ—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω</b>\n"
                            f"–ù–æ–º–µ—Ä —Å—á–µ—Ç–∞: <b>{bank_result['account_id']}</b>\n"
                            f"–°—Ç–∞—Ä—ã–π –ø–∞—Ä–æ–ª—å: <tg-spoiler>***{old_password[-2:]}</tg-spoiler>\n"
                            f"–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å: <tg-spoiler>***{new_password[-2:]}</tg-spoiler>\n\n"
                            f"–°–ø–∏—Å–∞–Ω–æ —Å –±–∞–ª–∞–Ω—Å–∞: <b>{config.PRICE_CHANGE_BANK_CRYSTALS} üíé</b>")
                    await message.answer(text, parse_mode=HTML)

                    try:
                        if bank_result['user_id'] != user.user_id:
                            text_2 = ("‚ö†Ô∏è <b>–ö—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏–ª –ø–∞—Ä–æ–ª—å —Å—á–µ—Ç–∞</b>\n"
                                      f"–ù–æ–º–µ—Ä —Å—á–µ—Ç–∞: <b>{bank_result['account_id']}</b>")
                            await bot.send_message(bank_result['user_id'], text_2, parse_mode=HTML)
                    except:
                        pass

                else:
                    text = ("‚ùå <b>–ë–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ —Å—á–µ—Ç–∞ —Å —Ç–∞–∫–∏–º –ø–∞—Ä–æ–ª–µ–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç</b>\n"
                            f"–í –∫–∞—á–µ—Å—Ç–≤–µ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏ –±–∞–Ω–∫ —Å–ø–∏—Å–∞–ª —Å –≤–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ <b>{fee} –º–æ–Ω–µ—Ç–æ–∫</b>")
                    await message.answer(text, parse_mode=HTML)

            except Exception as e:
                text = f"‚ùå {e}"
                await message.answer(text, parse_mode=HTML)

        # –û–±–Ω–∞–ª–∏—á–∏–≤–∞–Ω–∏–µ –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ —Å—á—ë—Ç–∞.
        elif cm == "/unbank":
            if not args:
                text = ("‚ùå <b>–ö–æ–º–∞–Ω–¥–∞ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ</b>\n"
                        "<u>–û–ø–∏—Å–∞–Ω–∏–µ:</u> –í—ã–≤–æ–¥ –º–æ–Ω–µ—Ç–æ–∫ —Å –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ —Å—á–µ—Ç–∞ –Ω–∞ –±–∞–ª–∞–Ω—Å. –°—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥–∏ "
                        f"—Å–º–æ—Ç—Ä–∏—Ç–µ –≤ <a href='{config.REF_MAIN_MANUAL}'>–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —á–∞—Ç–∞</a>.\n"
                        "<u>–ö–æ–º–∞–Ω–¥–∞:</u> <code>/unbank [–ø–∞—Ä–æ–ª—å]</code>")
                await message.answer(text, parse_mode=HTML, disable_web_page_preview=True)
                return

            try:
                password = args[0].lower()
                if user.balance >= config.PRICE_UNBANK:
                    if not (user.crystals >= config.PRICE_UNBANK_CRYSTALS):
                        text = (f"‚ùå <b>–£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤ –¥–ª—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏</b>\n"
                                f"–¢—Ä–µ–±—É–µ—Ç—Å—è: <b>{config.PRICE_UNBANK_CRYSTALS} üíé</b>.")
                        await message.answer(text, parse_mode=HTML)
                        return

                    if utils.is_text_cleared(password) and len(password) <= 6:

                        fee = utils.calc_fee(user.balance, config.FEE_UNBANK, config.PRICE_UNBANK)

                        bank_result = await user.get_bank_by_password(password, fee)
                        if bank_result:
                            owner_id = bank_result['user_id']
                            owner = await entities.get_user_by_id(user.get_storage(), owner_id)

                            start_sum: int = bank_result['balance']
                            now_sum: int = bank_result['unbankSum']
                            bank_id: int = bank_result['account_id']

                            created_time: datetime.datetime = bank_result['created']
                            time_passed: int = int(datetime.datetime.now().timestamp() - created_time.timestamp())
                            show_time = utils.format_time(time_passed)

                            text = (f"üí≥ <b>–ë–∞–Ω–∫–æ–≤—Å–∫–∏–π —Å—á–µ—Ç</b>\n"
                                    f"ID —Å—á–µ—Ç–∞: <b>{bank_id}</b>\n"
                                    f"–ü–∞—Ä–æ–ª—å: <code>{password}</code>\n"
                                    f"–ü—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏: <b>{utils.format_balance(start_sum)} ü™ô</b>\n"
                                    f"–°–µ–π—á–∞—Å: <b>{utils.format_balance(now_sum)} ü™ô</b>\n"
                                    f"–ü—Ä–æ—à–ª–æ: <i>{show_time}</i>\n\n"
                                    f"üë§ <b>–í–ª–∞–¥–µ–ª–µ—Ü —Å—á–µ—Ç–∞</b>\n{owner}\n\n"
                                    f"üèß <b>–°—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥</b>\n"
                                    f"–°–Ω—è—Ç—å —Å–æ —Å—á–µ—Ç–∞: <b>{config.PRICE_UNBANK_CRYSTALS} üíé</b>\n"
                                    f"–ü—Ä–∏–≤—è–∑–∞—Ç—å –∫ —Å–µ–±–µ: <b>{config.PRICE_LINK_CRYSTALS} üíé</b>\n"
                                    f"–ü–æ–º–µ–Ω—è—Ç—å –ø–∞—Ä–æ–ª—å: <b>{config.PRICE_CHANGE_BANK_CRYSTALS} üíé</b>")
                            await message.answer(text, parse_mode=HTML,
                                                 reply_markup=keyboards.unbank_menu(user.user_id, password))

                        else:
                            text = ("‚ùå <b>–ë–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ —Å—á–µ—Ç–∞ —Å —Ç–∞–∫–∏–º –ø–∞—Ä–æ–ª–µ–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç</b>\n"
                                    f"–í –∫–∞—á–µ—Å—Ç–≤–µ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏ –±–∞–Ω–∫ —Å–ø–∏—Å–∞–ª —Å –≤–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ <b>{fee} –º–æ–Ω–µ—Ç–æ–∫</b>")
                            await message.answer(text, parse_mode=HTML)

                    else:
                        text = (f"‚ùå –ü–∞—Ä–æ–ª—å –º–æ–∂–µ—Ç —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ –±—É–∫–≤ –ª–∞—Ç–∏–Ω—Å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞ (abcde...) –∏ "
                                f"—Ü–∏—Ñ—Ä (0123...) –∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –±–æ–ª—å—à–µ 6-—Ç–∏ —Å–∏–º–≤–æ–ª–æ–≤ –≤ –¥–ª–∏–Ω—É.")
                        await message.answer(text)

                else:
                    text = (f"‚ùå –ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª–µ–µ <b>{config.PRICE_UNBANK} –º–æ–Ω–µ—Ç–æ–∫</b>, "
                            f"—á—Ç–æ–±—ã –≤—ã–ø–æ–ª–Ω–∏—Ç—å —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ.")
                    await message.answer(text, parse_mode=HTML)

            except:
                text = (f"‚ùå –û—à–∏–±–∫–∞ - —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–∞—à–µ–π "
                        f"–≤–≤–µ–¥–µ–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã.")
                await message.answer(text, parse_mode=HTML)

        # –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–æ–ø–∞ –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö —Å—á–µ—Ç–æ–≤.
        elif cm == "/topbanks":
            try:
                banks = await storage.get_top_banks()

                if banks:
                    text = "üí∞ <b>–¢–æ–ø –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö —Å—á–µ—Ç–æ–≤</b>"

                    for numb, bank in enumerate(banks[:10]):
                        text += (f"\n\n{numb + 1}) <u>–°—á–µ—Ç #{bank['account_id']}</u>\n"
                                 f"–ü—Ä–æ—Ü–µ–Ω—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞: <b>{bank['ownerPercent']}%</b>\n"
                                 f"–ü—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏: <b>{utils.format_balance(bank['balance'])} ü™ô</b>\n"
                                 f"–°–µ–π—á–∞—Å: <b>{utils.format_balance(bank['unbankSum'])} ü™ô</b>")

                else:
                    text = "‚ÑπÔ∏è –ù–µ—Ç –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö —Å—á–µ—Ç–æ–≤"
            except Exception as e:
                await bot.send_message(config.ADMIN_ID, f"[topbanks]: {e}")
                text = (f"‚ùå –û—à–∏–±–∫–∞ - —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–∞—à–µ–π "
                        f"–≤–≤–µ–¥–µ–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            await message.answer(text, parse_mode=HTML)

        # –ü—Ä–æ—Å–º–æ—Ç—Ä –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö —Å—á–µ—Ç–æ–≤.
        elif cm == "/mybank":
            rpl = None
            private_mode = (message.chat.id == user.user_id)
            try:
                banks_task = asyncio.create_task(user.get_banks())
                user_bank_perecent_task = asyncio.create_task(user.get_bank_percent())

                group = user.get_group()
                group_level_task = asyncio.create_task(group.get_level())

                banks = await banks_task
                user_bank_percent = await user_bank_perecent_task
                group_level = await group_level_task

                if banks:
                    total_balance = sum([b['unbankSum'] for b in banks])
                    hack_percentage = utils.calc_hack_percentage(user.protect_level, group_level)
                    text = ("üè¶ <b>–í–∞—à–∏ –±–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Å—á–µ—Ç–∞</b>\n\n"
                            f"‚¨ÜÔ∏è –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –≤ –¥–µ–Ω—å: <b>{user_bank_percent}%</b>\n"
                            f"üõ°Ô∏è –£—Ä–æ–≤–µ–Ω—å –∑–∞—â–∏—Ç—ã: <b>{user.protect_level}</b>\n"
                            f"üõ∞Ô∏è –®–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ–π –∞—Ç–∞–∫–∏: <b>{hack_percentage}%</b>\n"
                            f"üí∞ –í –±–∞–Ω–∫–µ: <b>{utils.format_balance(total_balance)}</b> ü™ô")

                    now = datetime.datetime.now()
                    for bank in banks:
                        created_time: datetime.datetime = bank['created']
                        time_passed: int = int(now.timestamp() - created_time.timestamp())
                        show_time = utils.format_time(time_passed)

                        text += (f"\n\n<u>–°—á–µ—Ç #{bank['account_id']}</u>\n"
                                 f"–ü—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏: <b>{utils.format_balance(bank['balance'])} ü™ô</b>\n"
                                 f"–°–µ–π—á–∞—Å: <b>{utils.format_balance(bank['unbankSum'])} ü™ô</b>\n"
                                 f"–ü—Ä–æ—à–ª–æ: <i>{show_time}</i>")
                        if private_mode:
                            text += f"\n–ü–∞—Ä–æ–ª—å: <tg-spoiler>***{bank['a_password'][-2:]}</tg-spoiler>"

                    if not config.DEBUG_MODE:
                        notif_text = f"üí∞ <b>–ü—Ä–æ—Å–º–æ—Ç—Ä –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö —Å—á–µ—Ç–æ–≤</b>\n{user}"
                        await tg.notify(bot, notif_text)

                else:
                    text = "‚ÑπÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö —Å—á–µ—Ç–æ–≤"
                rpl = keyboards.mybank_menu(user.user_id, False)
            except:
                text = (f"‚ùå –û—à–∏–±–∫–∞ - —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–∞—à–µ–π "
                        f"–≤–≤–µ–¥–µ–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            await message.answer(text, parse_mode=HTML, reply_markup=rpl)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –º–æ–Ω–µ—Ç–æ–∫.
        elif cm == "/coins":
            text = (f"<u>–°–±–µ—Ä–µ–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</u>\n"
                    f"ü™ô <b>{utils.format_balance(user.balance)} –º–æ–Ω–µ—Ç–æ–∫</b>\n"
                    f"üíé <b>{utils.format_balance(user.crystals)} –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤</b>")
            await message.answer(text, parse_mode=HTML)

        # –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª—è.
        elif cm == "/profile":
            place_info = await user.get_top_place_info()

            place: int = place_info["place"]
            total_count: int = place_info["total"]
            banks: list = place_info["banks"]

            place_symbol = "üèÜ" if int(place) <= 10 else "üóÇ"
            banks_profile_info = await user.get_banks_profile_info(banks=banks)

            bank_total_balance: int = banks_profile_info["balance"]
            banks_count: int = banks_profile_info["count"]

            # –ü–æ–¥–≥—Ä—É–∂–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –±–∞–ª–∞–Ω—Å—ã.
            await user.load_balance_from_db()

            # –ü–æ–¥–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ.
            group = user.get_group()
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ.
            await group.update_info()

            tax_list = []

            # –í—ã—á–∏—Å–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–±–æ—Ä–∞—Ö –∏ –≤–∑–Ω–æ—Å–∞—Ö.
            daily_tax = utils.calc_daily_fee(user.balance, user.in_group())
            tax_list.append(f"–ü—Ä–µ–±—ã–≤–∞–Ω–∏–µ –≤ —á–∞—Ç–µ: <b>{utils.format_balance(daily_tax)} ü™ô</b>")
            if group.exists() and not (await group.is_leader(user.user_id)):
                group_tax = await group.get_tax()
                tax_list.append(f"–í–∑–Ω–æ—Å –≤ –≥—Ä—É–ø–ø—É: <b>{utils.format_balance(group_tax)} ü™ô</b>")

            if tax_list:
                tax_info = "\n\n<u>–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏</u>\n" + '\n'.join(tax_list)
            else:
                tax_info = ""

            if group.exists():
                group_info = (f"\n\n<u>–£—á–∞—Å—Ç–Ω–∏–∫ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è</u>\n"
                              f"–ì—Ä—É–ø–ø–∞: <b>{group.get_name()}</b>\n"
                              f"–î–æ–ª–∂–Ω–æ—Å—Ç—å: <b>{group.get_user_post(user.user_id)}</b>")
            else:
                group_info = ""

            if user.policy == 1:
                policy_info = "\n\n‚òëÔ∏è –í–∞–º –º–æ–≥—É—Ç –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"
            else:
                policy_info = "\n\nüõÇ –í–∞–º –º–æ–≥—É—Ç –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏–∑ –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã"

            user_bank_percent_task = asyncio.create_task(user.get_bank_percent())
            group_level_task = asyncio.create_task(group.get_level())

            user_bank_percent = await user_bank_percent_task
            group_level = await group_level_task
            hack_percentage = utils.calc_hack_percentage(user.protect_level, group_level)

            text = (f"{place_symbol} –ú–µ—Å—Ç–æ –≤ –¢–û–ü: <b>{place} –∏–∑ {total_count}</b>\n"
                    f"üÜî –í–∞—à ID: <code>{user.user_id}</code>\n"
                    f"üïí –î–Ω–µ–π –≤ –ø—Ä–æ–µ–∫—Ç–µ: <b>{user.get_days()}</b>\n\n"
                    f"<u>–û—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–µ –±–∞–ª–∞–Ω—Å—ã</u>\n"
                    f"ü™ô <b>{utils.format_balance(user.balance)} –º–æ–Ω–µ—Ç–æ–∫</b>\n"
                    f"üíé <b>{utils.format_balance(user.crystals)} –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤</b>\n\n"
                    f"<u>–ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Å—á–µ—Ç–∞</u>\n"
                    f"üè¶ –ü—Ä–æ—Ü–µ–Ω—Ç –≤ –±–∞–Ω–∫–µ: <b>{user_bank_percent}%</b>\n"
                    f"üõ°Ô∏è –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –∞—Ç–∞–∫–∏: <b>{hack_percentage}%</b> \n"
                    f"ü™ô <b>{utils.format_balance(bank_total_balance)} –º–æ–Ω–µ—Ç–æ–∫</b> (—Å—á–µ—Ç–æ–≤: {banks_count})"
                    + tax_info + group_info + policy_info)
            await message.reply(text, parse_mode=HTML, reply_markup=keyboards.change_policy_menu(user.user_id))

        # –ü–µ—Ä–µ–≤–æ–¥ –º–æ–Ω–µ—Ç–æ–∫ –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
        elif cm == "/send":
            if len(args) < 2:
                text = ("‚ùå <b>–ö–æ–º–∞–Ω–¥–∞ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ</b>\n"
                        "<u>–û–ø–∏—Å–∞–Ω–∏–µ:</u> –ü–µ—Ä–µ–≤–æ–¥ –º–æ–Ω–µ—Ç–æ–∫ –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. –ü–æ–ª–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π "
                        "—É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ. –ï—Å–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É–∫–∞–∑–∞–Ω, –µ–≥–æ —É–≤–∏–¥–∏—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª—å. "
                        f"–ö–æ–º–∏—Å—Å–∏—è –∑–∞ –ø–µ—Ä–µ–≤–æ–¥ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {config.FEE_SEND}%\n"
                        "<u>–ö–æ–º–∞–Ω–¥–∞:</u> <code>/send [–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å] [–∫–æ–ª-–≤–æ –º–æ–Ω–µ—Ç–æ–∫] {–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π}</code>")
                await message.answer(text, parse_mode=HTML)
                return
            await tg.show_sending_procedure(message, user, args, bot_profile=BOT_PROFILE)

        # –ü–µ—Ä–µ–≤–æ–¥ –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤ –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
        elif cm == "/sendcrystals":
            if len(args) < 2:
                text = ("‚ùå <b>–ö–æ–º–∞–Ω–¥–∞ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ</b>\n"
                        "<u>–û–ø–∏—Å–∞–Ω–∏–µ:</u> –ü–µ—Ä–µ–≤–æ–¥ –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤ –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. –ü–æ–ª–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π "
                        "—É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ. –ï—Å–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É–∫–∞–∑–∞–Ω, –µ–≥–æ —É–≤–∏–¥–∏—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª—å. "
                        "–ö–æ–º–∏—Å—Å–∏—è –∑–∞ –ø–µ—Ä–µ–≤–æ–¥ –Ω–µ –≤–∑–∏–º–∞–µ—Ç—Å—è.\n"
                        "<u>–ö–æ–º–∞–Ω–¥–∞:</u> <code>/sendcrystals [–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å] [–∫–æ–ª-–≤–æ –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤] {–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π}</code>")
                await message.answer(text, parse_mode=HTML)
                return
            await tg.show_sending_crystals_procedure(message, user, args, bot_profile=BOT_PROFILE)

        # –ü–æ–¥–±–æ—Ä –ø–∞—Ä–æ–ª—è –∫ –±–∞–Ω–∫–æ–≤—Å–∫–æ–º—É —Å—á–µ—Ç—É.
        elif cm == "/hack":
            if len(args) < 2:
                text = ("‚ùå <b>–ö–æ–º–∞–Ω–¥–∞ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ</b>\n"
                        "<u>–û–ø–∏—Å–∞–Ω–∏–µ:</u> –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–¥–æ–±—Ä–∞—Ç—å –ø–∞—Ä–æ–ª—å –∫ –±–∞–Ω–∫–æ–≤—Å–∫–æ–º—É —Å—á–µ—Ç—É, –∑–Ω–∞—è —Ç–æ–ª—å–∫–æ –µ–≥–æ –Ω–æ–º–µ—Ä. "
                        "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å –∏ —Å–ª–µ–¥–æ–≤–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º. –ü–∞—Ä–æ–ª—å "
                        "–º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç 1 –¥–æ 6 —Å–∏–º–≤–æ–ª–æ–≤ (a-z, —Ü–∏—Ñ—Ä—ã). –†–µ–≥–∏—Å—Ç—Ä –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è (–Ω–µ –≤–∞–∂–Ω–æ –±–æ–ª—å—à–∏–µ –∏–ª–∏ "
                        "–º–∞–ª–µ–Ω—å–∫–∏–µ –±—É–∫–≤—ã)."
                        f"–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–ø—ã—Ç–∫–∏: <b>{config.PRICE_HACK_CRYSTALS} üíé</b>.\n"
                        "<u>–ö–æ–º–∞–Ω–¥–∞:</u> <code>/hack [–Ω–æ–º–µ—Ä —Å—á–µ—Ç–∞] [–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–π –ø–∞—Ä–æ–ª—å]</code>")
                await message.answer(text, parse_mode=HTML)
                return
            await tg.hack(message, user)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ –∫–æ–¥–∞.
        elif cm == "/anoncode":
            await tg.control_anon_code(message, user)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è / –ø—Ä–æ—Å–º–æ—Ç—Ä —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞.
        elif cm == "/msg":
            if len(args) < 2 and not (message.reply_to_message and args):
                text = ("‚ùå <b>–ö–æ–º–∞–Ω–¥–∞ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ</b>\n"
                        "<u>–û–ø–∏—Å–∞–Ω–∏–µ:</u> –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ª—é–±–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. "
                        "–ü–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–µ –≤–∏–¥–∏—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è. –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è "
                        "–Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 512-—Ç–∏ —Å–∏–º–≤–æ–ª–æ–≤ –≤ –¥–ª–∏–Ω—É. –ß—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –¥–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, "
                        "—Å–º–∞—Ö–Ω–∏—Ç–µ –µ–≥–æ –≤ Telegram –≤–ª–µ–≤–æ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è.\n"
                        f"–°—Ç–æ–∏–º–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏: <b>{config.PRICE_MSG_SEND} ü™ô</b>.\n"
                        "<u>–ö–æ–º–∞–Ω–¥–∞:</u> <code>/msg [–ø–æ–ª—É—á–∞—Ç–µ–ª—å] [—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è]</code>")
                await message.answer(text, parse_mode=HTML)
                return
            await tg.send_msg(message, user, BOT_PROFILE)

    except Exception as e:
        await message.answer("‚ò¢Ô∏è –ü—Ä–æ–≥—Ä–∞–º–º–Ω–∞—è –æ—à–∏–±–∫–∞ [CMD], —Å–æ–æ–±—â–∏—Ç–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É @reireireime.")

        try:
            await message.forward(config.ADMIN_ID)
        except:
            pass
        await bot.send_message(config.ADMIN_ID, str(e))


@dp.message_handler(content_types=types.ContentTypes.DICE)
async def handle_random(message: types.Message):
    if message.chat.id == config.CHAT_ID:
        await message.delete()
        await message.answer("üé∞ <b>–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—ã—Ç–∞—Ç—å —É–¥–∞—á—É –≤ –∫–∞–∑–∏–Ω–æ</b>\n"
                             "–ö–æ–º–∞–Ω–¥–∞: <code>/casino [—Å—Ç–∞–≤–∫–∞ –≤ –º–æ–Ω–µ—Ç–∫–∞—Ö]</code>", parse_mode=HTML)


@dp.message_handler(content_types=types.ContentTypes.STICKER)
async def handle_media(message: types.Message):
    try:
        user = entities.User(storage, **utils.unpack_message(message))

        if user.user_id == config.ANON_BOT_ID:
            return

        await user.load_from_db()

        availability = await tg.check_availability(bot, message, user)
        if not availability.result:
            if availability.delete:
                await message.delete()
            return

        await user.update()
        await tg.check_bad_habits(message, user)
    except Exception as e:
        print(f"TXT E: {e}")
        await message.answer("‚ò¢Ô∏è –ü—Ä–æ–≥—Ä–∞–º–º–Ω–∞—è –æ—à–∏–±–∫–∞ [TXT], —Å–æ–æ–±—â–∏—Ç–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É @reireireime.")


@dp.message_handler()
async def handle_message(message: types.Message):
    try:
        user = entities.User(storage, **utils.unpack_message(message))

        if user.user_id == config.ANON_BOT_ID:
            return

        await user.load_from_db()

        availability = await tg.check_availability(bot, message, user)
        if not availability.result:
            if availability.delete:
                await message.delete()
            return

        await user.update()
        await tg.check_bad_habits(message, user)
    except Exception as e:
        print(f"TXT E: {e}")
        await message.answer("‚ò¢Ô∏è –ü—Ä–æ–≥—Ä–∞–º–º–Ω–∞—è –æ—à–∏–±–∫–∞ [TXT], —Å–æ–æ–±—â–∏—Ç–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É @reireireime.")


@dp.callback_query_handler()
async def inline_touch(call: types.CallbackQuery):
    try:
        if call.message.from_user.id in config.IGNORED_IDS:
            return

        user = entities.User(storage, **utils.unpack_message(call))

        if user.user_id == config.ANON_BOT_ID:
            return

        await user.load_from_db()

        availability = await tg.check_availability(bot, call.message, user, call=call, ignore_agree=True)
        if not availability.result:
            return

        await user.update()

        if config.DEBUG_MODE:
            print(f"CALL.DATA: {call.data}")

        # –ü—Ä–∏–Ω—è—Ç–∏–µ –ø—Ä–∞–≤–∏–ª —á–∞—Ç–∞.
        if call.data.startswith("agree_"):
            try:
                person_id = int(call.data.replace("agree_", ""))

                if person_id == user.user_id:
                    await user.set_agreed(new_value=True)
                    await call.message.edit_reply_markup()

                    text = ("<b>üéâ –û—Ç–ª–∏—á–Ω–æ! –ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –æ–±—â–µ–Ω–∏–µ–º.</b>\n\n"
                            f"–ù–∞—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ —Å–æ–≤–µ—Ç—É—é –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞, —á—Ç–æ–±—ã –≤—ã–∂–∏—Ç—å –≤ —ç—Ç–æ–º —á–∞—Ç–µ: {config.REF_MSG_RULE}, "
                            f"—ç—Ç–æ –Ω–µ —Ç–∞–∫ –ø—Ä–æ—Å—Ç–æ –∫–∞–∫ –∫–∞–∂–µ—Ç—Å—è –Ω–∞ –ø–µ—Ä–≤—ã–π –≤–∑–≥–ª—è–¥. –£ —Ç–µ–±—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —à–∞–Ω—Å.\n\n"
                            f"‚ö†Ô∏è <b>–í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –º–µ—Ö–∞–Ω–∏–∫ —á–∞—Ç–∞ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω—ã. –ü—Ä–æ—á–∏—Ç–∞–π—Ç–µ –∏—Ö –≤—Å–µ.</b>\n\n"
                            f"–¢–∞–∫–∂–µ –Ω–µ –∑–∞–±—É–¥—å <a href='https://t.me/controlkids_bot'>–Ω–∞–ø–∏—Å–∞—Ç—å –º–Ω–µ –ª—Å</a>, —á—Ç–æ–±—ã —è –º–æ–≥–ª–∞ –≤ –±—É–¥—É—â–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–±–µ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è "
                            f"(–æ –ø–µ—Ä–µ–≤–æ–¥–∞—Ö –∏ —Ç–¥).")
                    await call.message.edit_text(text, parse_mode=HTML)

                    if not config.DEBUG_MODE:
                        notif_text = f"üìã <b>–ü—Ä–∞–≤–∏–ª–∞ –ø—Ä–∏–Ω—è—Ç—ã</b>\n{user}"
                        await tg.notify(bot, notif_text)

                else:
                    text = ("‚ùå –û—à–∏–±–∫–∞. –î–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–æ–≤–∞–Ω–æ –Ω–µ –≤–∞–º. –ß—Ç–æ–±—ã –ø—Ä–∏–Ω—è—Ç—å –ø—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞, –º–æ–∂–µ—Ç–µ "
                            "–Ω–∞–ø–∏—Å–∞—Ç—å –ê—é–º–∏ (–±–æ—Ç—É) –≤ –ª—Å.")
                    await call.answer(text, show_alert=True)
            except:
                text = ("‚ùå –ö–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞. –ß—Ç–æ–±—ã –ø—Ä–∏–Ω—è—Ç—å –ø—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞, –º–æ–∂–µ—Ç–µ "
                        "–Ω–∞–ø–∏—Å–∞—Ç—å –ê—é–º–∏ (–±–æ—Ç—É) –≤ –ª—Å.")
                await call.answer(text, show_alert=True)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è.
        elif call.data.startswith("hack_"):
            await tg.hack(call, user)

        # –û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è.
        elif call.data.startswith("cancel_"):
            if int(call.data.split("_")[1]) != user.user_id:
                await call.answer("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–æ–≤–∞–Ω–æ –Ω–µ –≤–∞–º", show_alert=True)
                return
            await call.message.delete()

        # –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –Ω–∞ –ø–µ—Ä–≤–æ–º —ç—Ç–∞–ø–µ.
        elif call.data.startswith("poll_"):
            await tg.process_vote(call, user)

        # –ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è.
        elif call.data.startswith("create_ad_"):
            await tg.create_ad(call, user, temp_storage)

        # –ò–≥—Ä–∞ –≤ –∫–∞–∑–∏–Ω–æ.
        elif call.data.startswith("game_"):
            await tg.show_casino(call, user)

        # –ü—Ä–∏–Ω—è—Ç–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É.
        elif call.data.startswith("joingroup_"):
            await tg.show_group_inviting(call, user, None)

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≥—Ä—É–ø–ø—ã.
        elif call.data.startswith("removemember_"):
            await tg.removing_user_from_group(call, user, BOT_PROFILE)

        elif call.data.startswith("upmybank_") or call.data.startswith("doupmybank_"):
            await tg.mybank_upgrade(call, user)

        elif call.data.startswith("backupgrade_") or call.data.startswith("dobackupgrade_"):
            await tg.back_mybank_upgrading(call, user)

        elif call.data.startswith("upprotect_") or call.data.startswith("doupprotect_"):
            await tg.protect_mybank(call, user)

        # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–ª–∏—Ç–∏–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤.
        elif call.data.startswith("changepolicy_"):
            person_id = int(call.data.split("_")[-1])

            if person_id != user.user_id:
                await call.answer("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–æ–≤–∞–Ω–æ –Ω–µ –≤–∞–º", show_alert=True)
                return

            await user.change_policy()

            text = "üèß –†–µ–∂–∏–º –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –∏–∑–º–µ–Ω–µ–Ω"
            await call.message.edit_text(text)

        # –£–¥–∞–ª–µ–Ω–∏–µ —Ä–µ–ø–æ—Ä—Ç–æ–≤.
        elif call.data.startswith("deletereports_"):
            person_id = int(call.data.split("_")[1])

            if user.user_id != person_id:
                await call.answer("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–æ–≤–∞–Ω–æ –Ω–µ –≤–∞–º", show_alert=True)
                return

            if not (user.crystals >= config.PRICE_DELETE_REPORTS_CRYSTALS):
                text = (f"‚ùå –£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤ –¥–ª—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.\n"
                        f"–¢—Ä–µ–±—É–µ—Ç—Å—è: {config.PRICE_DELETE_REPORTS_CRYSTALS} üíé")
                await call.answer(text, show_alert=True)
                return

            reports_deleted = await user.delete_reports()
            if reports_deleted:
                text = (f"‚òëÔ∏è –£–¥–∞–ª–µ–Ω–æ –∂–∞–ª–æ–±: <b>{reports_deleted}</b>\n"
                        f"–°–ø–∏—Å–∞–Ω–æ —Å –±–∞–ª–∞–Ω—Å–∞: <b>{config.PRICE_UNBANK_CRYSTALS} üíé</b>")
            else:
                text = ("‚òëÔ∏è <b>–ù–∞ –≤–∞—Å –Ω–µ –±—ã–ª–æ –∂–∞–ª–æ–±</b>\n"
                        f"–°–ø–∏—Å–∞–Ω–æ —Å –±–∞–ª–∞–Ω—Å–∞: <b>{config.PRICE_UNBANK_CRYSTALS} üíé</b>")
            await call.message.edit_text(text, parse_mode=HTML)

        # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Ä–∞–∑–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã –≤  –º–∞—Ä–∫–µ—Ç–µ.
        elif (call.data.startswith("buy_crystals_") or call.data.startswith("sell_crystals_") or
              call.data.startswith("getback_crystals_") or call.data.startswith("getback_coins_") or
              call.data.startswith("back_market_") or call.data.startswith("offer_")):
            await tg.process_market_click(call, user)

        elif call.data == "market_info_buy":
            text = ("üõÉ –í—ã –º–æ–∂–µ—Ç–µ –±—ã—Å—Ç—Ä–æ –∫—É–ø–∏—Ç—å 1 –∫—Ä–∏—Å—Ç–∞–ª–ª –ø–æ –Ω–∞–∂–∞—Ç–∏—é –Ω–∞ –≤–µ—Ä—Ö–Ω—é—é –∫–Ω–æ–ø–∫—É –∏–ª–∏ "
                    "—Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /buy")
            await call.answer(text, show_alert=True)

        elif call.data == "market_info_sell":
            text = ("üõÉ –í—ã –º–æ–∂–µ—Ç–µ –±—ã—Å—Ç—Ä–æ –ø—Ä–æ–¥–∞—Ç—å 1 –∫—Ä–∏—Å—Ç–∞–ª–ª –ø–æ –Ω–∞–∂–∞—Ç–∏—é –Ω–∞ –≤–µ—Ä—Ö–Ω—é—é –∫–Ω–æ–ø–∫—É –∏–ª–∏ "
                    "–≤—ã—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ –ø—Ä–æ–¥–∞–∂—É —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /sell")
            await call.answer(text, show_alert=True)

        elif call.data.startswith("answ_"):
            text = ("üì® –ß—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –¥–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Å–º–∞—Ö–Ω–∏—Ç–µ –µ–≥–æ –≤ Telegram –≤–ª–µ–≤–æ "
                    "–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è /msg [–≤–∞—à —Ç–µ–∫—Å—Ç].")
            await call.answer(text, show_alert=True)

        # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã.
        elif call.data.startswith("newgroup_"):
            await tg.show_group_creating(call, user)

        # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã.
        elif call.data.startswith("renamegroup_"):
            await tg.rename_group(call, user)

        # –ü—Ä–æ—Å–º–æ—Ç—Ä —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã.
        elif call.data.startswith("memberslist_"):
            await tg.show_group_members(call, user)

        # –ó–∞–ø—Ä–æ—Å / –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞ –≤—ã—Ö–æ–¥ –∏–∑ –≥—Ä—É–ø–ø—ã.
        # –ó–∞–ø—Ä–æ—Å / –ü–æ–¥—Ç–≤–µ–∂–¥–µ–Ω–∏–µ –Ω–∞ –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –≥—Ä—É–ø–ø—ã.
        elif (call.data.startswith("exitgroup_") or call.data.startswith("doexitgroup_") or
              call.data.startswith("upgroup_") or call.data.startswith("doupgroup_")):
            await tg.show_user_group(call, user)

        # –£–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã.
        elif call.data.startswith("removegroup_") or call.data.startswith("doremovegroup_"):
            await tg.removing_group(call, user)

        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ / –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ –∫–æ–¥–∞.
        elif (call.data.startswith("dorecreate_msg_code_") or call.data.startswith("recreate_msg_code_") or
              call.data.startswith("create_msg_code_")):
            await tg.control_anon_code(call, user)

        # –°–Ω—è—Ç–∏–µ –º–æ–Ω–µ—Ç–æ–∫ —Å–æ —Å—á–µ—Ç–∞ –≤ –±–∞–Ω–∫–µ.
        elif call.data.startswith("unbank_"):
            await tg.unbank(call, user)

        # –ü—Ä–∏–≤—è–∑–∫–∞ —Å—á–µ—Ç–∞ –∫ —Å–≤–æ–µ–º—É –∞–∫–∫–∞–Ω—Ç—É.
        elif call.data.startswith("relinkbank_"):
            await tg.relink_bank(call, user)

        # –ü–æ–º–µ–Ω—è—Ç—å –ø–∞—Ä–æ–ª—å –∫ —Å—á–µ—Ç—É.
        elif call.data.startswith("changebank_"):
            person_id = int(call.data.split("_")[-1])

            if person_id != user.user_id:
                await call.answer("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–æ–≤–∞–Ω–æ –Ω–µ –≤–∞–º", show_alert=True)
                return

            text = ("üîë <b>–°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è —Å—á–µ—Ç–∞</b>\n"
                    "<u>–û–ø–∏—Å–∞–Ω–∏–µ:</u> –°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ —Å—á–µ—Ç–∞.\n"
                    f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {config.PRICE_CHANGE_BANK_CRYSTALS} üíé\n"
                    "<u>–ö–æ–º–∞–Ω–¥–∞:</u> <code>/changebank [—Å—Ç–∞—Ä—ã–π –ø–∞—Ä–æ–ª—å] [–Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å]</code>")
            await call.message.edit_text(text, parse_mode=HTML,
                                         reply_markup=keyboards.cancel_menu(user.user_id))

    except Exception as e:
        print(f"INL E: {e}")
        await call.answer("‚ò¢Ô∏è –ü—Ä–æ–≥—Ä–∞–º–º–Ω–∞—è –æ—à–∏–±–∫–∞ [INL], —Å–æ–æ–±—â–∏—Ç–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É @reireireime.", show_alert=True)


@dp.chat_join_request_handler()
async def user_join_request(update: types.ChatJoinRequest):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–∞–ª –∑–∞—è–≤–∫—É –Ω–∞ –≤—Ö–æ–¥ –≤ —á–∞—Ç."""
    try:
        if update.chat.id != config.CHAT_ID:
            return

        user = entities.User(storage, **utils.unpack_message(update))

        if user.user_id == config.ANON_BOT_ID:
            return

        await user.load_from_db()

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, —Ç–æ –ø—Ä–∏–Ω–∏–º–∞–µ–º –∑–∞—è–≤–∫—É, –∏–Ω–∞—á–µ - –æ—Ç–∫–ª–æ–Ω—è–µ–º.
        if user.banned and not user.admin():
            await update.decline()
        else:
            await update.approve()
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –ë–î.
            await user.update()

            if not config.DEBUG_MODE:
                notif_text = f"‚û°Ô∏è <b>–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞</b>\n{user}"
                await tg.notify(bot, notif_text)
    except Exception as e:
        print(f"RINV E: {e}")


@dp.message_handler(content_types=[types.ContentType.NEW_CHAT_MEMBERS])
async def user_joined_chat(message: types.Message):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—Å—Ç—É–ø–∏–ª –≤ —á–∞—Ç."""

    try:
        if message.chat.id != config.CHAT_ID:
            return

        user = entities.User(storage, **utils.unpack_message(message))

        if user.user_id == config.ANON_BOT_ID:
            return

        await user.load_from_db()

        if not user.admin():
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤ –ë–î.
            if user.banned:
                # –ë–ª–æ–∫–∏—Ä—É–µ–º –µ–≥–æ –≤ —á–∞—Ç–µ.
                await bot.ban_chat_member(config.CHAT_ID, user.user_id)
                return
        try:
            await message.reply(
                f"‚úã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å.</b>\n"
                f"–ù–∞–ø–∏—à–∏ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∑–∞—Ç–µ–º –ø—Ä–∏–º–∏ –ø—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞ "
                f"–≤ —Ç–µ—á–µ–Ω–∏–µ {utils.format_time(config.TIME_TO_AGREED)}, —á—Ç–æ–±—ã "
                "–Ω–µ –±—ã—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã–º.",
                parse_mode=HTML
            )
        except:
            pass

    except Exception as e:
        print(f"INV E: {e}")


@dp.message_handler(content_types=[types.ContentType.LEFT_CHAT_MEMBER])
async def user_left_chat(message: types.Message):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª —Å —á–∞—Ç–∞."""
    try:
        if message.chat.id != config.CHAT_ID:
            return

        user_id = message.left_chat_member.id
        user = entities.User(storage, user_id)
        await user.load_from_db()

        # –ë–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        if not user.admin():
            if not user.banned:
                await bot.ban_chat_member(config.CHAT_ID, user.user_id)

                users = await storage.get_users()
                random_user = random.choice(users)

                to_user = entities.User(storage, random_user["user_id"])
                to_user.load_from_dict(data=random_user)

                await user.pay(user.balance)
                await storage.increase_user_balance(to_user.user_id, user.balance)

                text = (f"‚õîÔ∏è <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ß–°</b>\n{user}\n–ë–∞–ª–∞–Ω—Å: <b>{utils.format_balance(user.balance)} –º–æ–Ω–µ—Ç–æ–∫</b>\n\n"
                        f"–ü—Ä–∏—á–∏–Ω–∞: –≤—ã—à–µ–ª –∏–∑ —á–∞—Ç–∞.\n\n"
                        f"üí∏ <b>–ë–∞–ª–∞–Ω—Å –ø–µ—Ä–µ–≤–µ–¥–µ–Ω —Å–ª—É—á–∞–π–Ω–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É</b>\n{to_user}")

                await message.reply(text, parse_mode=HTML)
                await user.ban()

            if not config.DEBUG_MODE:
                notif_text = (f"‚¨ÖÔ∏è <b>–ü–æ–∫–∏–Ω—É–ª —á–∞—Ç</b>\n{user}\n"
                              f"–ë–∞–ª–∞–Ω—Å: <b>{utils.format_balance(user.balance)} –º–æ–Ω–µ—Ç–æ–∫</b>")
                await tg.notify(bot, notif_text)

    except Exception as e:
        print(f"EXT E: {e}")


async def process_chat_tasks():
    time_info = {}

    def can_process(key: str, seconds_cooldown: int, allow_none: bool = False) -> bool:
        now_time = datetime.datetime.now()
        last_time: datetime.datetime = time_info.get(key)

        if not last_time and not allow_none:
            time_info[key] = now_time
            return False

        if not last_time or now_time >= last_time + datetime.timedelta(seconds=seconds_cooldown):
            time_info[key] = now_time
            return True
        return False

    while True:
        try:
            await asyncio.sleep(10)
            if config.DEBUG_MODE:
                print("updated")

            if can_process("clear_inactive", 600) and not config.DEBUG_MODE:
                # –ß–∏—Å—Ç–∏–º –æ—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
                await tg.clear_from_inactive_users(bot, storage)

            elif can_process("clear_disagreed", 600) and not config.DEBUG_MODE:
                # –ß–∏—Å—Ç–∏–º –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫—Ç–æ –Ω–µ –ø—Ä–∏–Ω—è–ª —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ.
                await tg.clear_from_disagreed_users(bot, storage)

            elif can_process("pay_chat", 180) and not config.DEBUG_MODE:
                now = datetime.datetime.now()

                day = datetime.timedelta(seconds=86400)
                notif_before_time = 3600
                notif_period = datetime.timedelta(seconds=int(notif_before_time))
                notif_period_double = datetime.timedelta(seconds=int(notif_before_time * 2))

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–≥–¥–∞ –±—ã–ª–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–ø–∏—Å–∞–Ω–∏–µ (timestamp).
                last_paying = await storage.get_temp_storage("lastPaying")
                if config.DEBUG_MODE:
                    print(f"last_paying: {last_paying}")

                # –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ —Å—É—Ç–æ–∫ –∏–ª–∏ –Ω–µ—Ç –ø—Ä–æ—à–ª–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.
                if not last_paying or now >= datetime.datetime.fromtimestamp(int(last_paying)) + day:
                    # –û—Ç–º–µ—á–∞–µ–º –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è.
                    await storage.update_temp_storage("lastPaying", int(now.timestamp()))

                    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
                    users = await storage.get_users()
                    good = 0
                    bad = 0
                    paid = 0

                    users_will_bad = [1 for u in users if
                                      u['balance'] and u['balance'] < config.PRICE_CHAT_DAILY and not u['team_id']]

                    text = ("‚ò¢Ô∏è <b>–í–æ—Ç-–≤–æ—Ç –Ω–∞—á–Ω—ë—Ç—Å—è —á–∏—Å—Ç–∫–∞</b>\n"
                            f"–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: <b>{len(users)}</b>\n"
                            f"–ë—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ: <b>~{len(users_will_bad)}</b>\n\n"
                            f"–£ –≤–∞—Å –µ—Å—Ç—å 10 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –µ—ë –Ω–∞—á–∞–ª–æ–º. –ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º: @reireireime")
                    await bot.send_message(config.CHAT_ID, text, parse_mode=HTML)
                    await asyncio.sleep(10)

                    for user_note in users:
                        try:
                            user = entities.User(storage, user_note["user_id"], user_note["username"],
                                                 user_note["first_name"], user_note["last_name"])
                            user.balance = user_note["balance"]
                            user.team_id = user_note["team_id"]

                            # –í—ã—á–∏—Å–ª—è–µ–º —Å—É–º–º—É —Å–±–æ—Ä–∞.
                            user_fee = utils.calc_daily_fee(user.balance, user.in_group())

                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ö–≤–∞—Ç–∏—Ç –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–∞–ª–∞–Ω—Å–∞.
                            if user.balance >= user_fee:
                                # –°–ø–∏—Å—ã–≤–∞–µ–º —Å–±–æ—Ä.
                                await user.pay(user_fee)
                                good += 1
                                paid += user_fee

                                if config.DEBUG_MODE:
                                    print(f"USER: {user.user_id} - paid")

                            elif not user.in_group():
                                # –ò—Å–∫–ª—é—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
                                await user.ban()
                                try:
                                    await bot.ban_chat_member(config.CHAT_ID, user.user_id)
                                except:
                                    pass

                                await asyncio.sleep(3)
                                text = (
                                    f"‚õîÔ∏è <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—Å–∫–ª—é—á–µ–Ω</b>\n{user}\n–ë–∞–ª–∞–Ω—Å: <b>{utils.format_balance(user.balance)} –º–æ–Ω–µ—Ç–æ–∫</b>\n\n"
                                    f"–ü—Ä–∏—á–∏–Ω–∞: –Ω–µ—É–ø–ª–∞—Ç–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Å–±–æ—Ä–∞ –≤ {utils.format_balance(user_fee)} –º–æ–Ω–µ—Ç–æ–∫.")
                                await bot.send_message(config.CHAT_ID, text, parse_mode=HTML)

                                await asyncio.sleep(3)
                                try:
                                    text = (f"‚õîÔ∏è <b>–í—ã –±—ã–ª–∏ –∏—Å–∫–ª—é—á–µ–Ω—ã –∏–∑ —á–∞—Ç–∞</b>\n"
                                            f"–ü—Ä–∏—á–∏–Ω–∞: –Ω–µ—É–ø–ª–∞—Ç–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Å–±–æ—Ä–∞ –≤ {utils.format_balance(user_fee)} –º–æ–Ω–µ—Ç–æ–∫.")
                                    await bot.send_message(user.user_id, text, parse_mode=HTML)
                                except:
                                    pass
                                bad += 1

                                if config.DEBUG_MODE:
                                    print(f"USER: {user.user_id} - banned from paying")
                        except Exception as ee:
                            await bot.send_message(config.ADMIN_ID, f"[—Ü–∏–∫–ª2]: {ee}")

                    text = ("üìù <b>–ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ —Å–±–æ—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ</b>\n"
                            f"–í—Å–µ–≥–æ –±—ã–ª–æ —Å–ø–∏—Å–∞–Ω–æ: <b>{utils.format_balance(int(paid))} ü™ô</b>\n"
                            f"–û–ø–ª–∞—Ç–∏–≤—à–∏—Ö —Å–±–æ—Ä: <b>{good}</b>\n"
                            f"–ò—Å–∫–ª—é—á–µ–Ω–Ω—ã—Ö: <b>{bad}</b>\n\n"
                            f"–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º: @reireireime")
                    await bot.send_message(config.CHAT_ID, text, parse_mode=HTML)

                elif now >= datetime.datetime.fromtimestamp(int(last_paying)) + day - notif_period:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–≥–¥–∞ –±—ã–ª–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (timestamp).
                    last_paying_notif = await storage.get_temp_storage("lastPayingNotif")

                    if config.DEBUG_MODE:
                        print(f"last_paying_notif: {last_paying_notif}")

                    if not last_paying_notif or now >= datetime.datetime.fromtimestamp(
                            int(last_paying_notif)) + notif_period_double:
                        # –û—Ç–º–µ—á–∞–µ–º –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è.
                        await storage.update_temp_storage("lastPayingNotif", int(now.timestamp()))
                        seconds_left = (datetime.datetime.fromtimestamp(int(last_paying)) + day - now).seconds

                        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
                        text = ("üõÇ <b>–°–∫–æ—Ä–æ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ</b>\n"
                                f"–ö–∞–∂–¥—ã–µ 24 —á–∞—Å–∞ —Å –±–∞–ª–∞–Ω—Å–∞ –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è <b>{config.FEE_CHAT_DAILY}%</b>, –Ω–æ –Ω–µ –º–µ–Ω–µ–µ "
                                f"<b>{config.PRICE_CHAT_DAILY} –º–æ–Ω–µ—Ç–æ–∫</b>. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Å—Ç–æ–∏—Ç –≤ –≥—Ä—É–ø–ø–µ, —Ç–æ "
                                f"—Å –Ω–µ–≥–æ –±—É–¥–µ—Ç —Å–ø–∏—Å—ã–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞–ª–æ–≥, –ø—Ä–µ–≤—ã—à–∞—é—â–∏–π –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π.\n\n"
                                f"‚ö†Ô∏è –ï—Å–ª–∏ –Ω–∞ —ç—Ç–æ—Ç –º–æ–º–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—É–¥–µ—Ç –Ω–µ –≤ —Å–∏–ª–∞—Ö –æ–ø–ª–∞—Ç–∏—Ç—å –Ω–∞–ª–æ–≥, —Ç–æ "
                                f"–æ–Ω –±—É–¥–µ—Ç <b>–Ω–∞–≤—Å–µ–≥–¥–∞ –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ —á–∞—Ç–∞</b>. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–ø–ª–∞—Ç–∏—Ç—å —Å–±–æ—Ä. "
                                f"–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º: @reireireime\n\n"
                                f"C–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Å—Ç–æ–∏—Ç—Å—è —á–µ—Ä–µ–∑: <b>{utils.format_time(seconds_left)}</b>")
                        await bot.send_message(config.CHAT_ID, text, parse_mode=HTML)

            elif can_process("get_lucky_crystals", 600) and not config.DEBUG_MODE:
                try:
                    now = datetime.datetime.now()
                    last_controlling = await storage.get_temp_storage("lastGetLuckyCrystals")
                    day = datetime.timedelta(seconds=86400)

                    # –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ —Å—É—Ç–æ–∫ –∏–ª–∏ –Ω–µ—Ç –ø—Ä–æ—à–ª–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.
                    if not last_controlling or now >= datetime.datetime.fromtimestamp(int(last_controlling)) + day:

                        # –û—Ç–º–µ—á–∞–µ–º –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è.
                        await storage.update_temp_storage("lastGetLuckyCrystals", int(now.timestamp()))

                        if random.randint(1, 4) == 2:
                            text = (f"üçÄ <b>–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ä–∞–∑–¥–∞—á–∞</b>\n"
                                    f"–û–π, –Ω–µ –ø–æ–≤–µ–∑–ª–æ. –°–µ–≥–æ–¥–Ω—è —Ä–∞–∑–¥–∞—á–∏ –Ω–µ –±—É–¥–µ—Ç.")
                            await bot.send_message(config.CHAT_ID, text, parse_mode=HTML)
                            return

                        users = await storage.get_users()

                        users_count = len(users)
                        if users_count > config.LUCKY_USERS_MAX:
                            users_count = config.LUCKY_USERS_MAX

                        lucky_users_count = random.randint(1, users_count)
                        crystals_per_user_max = config.LUCKY_CRYSTALS_PER_USER_COUNT_MAX

                        text = (f"üçÄ <b>–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ä–∞–∑–¥–∞—á–∞</b>\n"
                                f"–ß–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ <b>{lucky_users_count}</b> —Å–ª—É—á–∞–π–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π "
                                f"—á–∞—Ç–∞ –ø–æ–ª—É—á–∞—Ç —Å–ª—É—á–∞–π–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤\n\n"
                                f"–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º: @reireireime")
                        await bot.send_message(config.CHAT_ID, text, parse_mode=HTML)

                        await asyncio.sleep(5)

                        spread_crystals = 0
                        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—á–∞—Å—Ç–ª–∏–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
                        lucky_users = (await storage.get_random_users(lucky_users_count))[:]
                        for user in lucky_users:
                            crystals_per_user = random.randint(1, crystals_per_user_max)
                            spread_crystals += crystals_per_user
                            await storage.add_user_crystals(user['user_id'], crystals_per_user)
                            try:
                                text = ("üéâ <b>–í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω</b>\n"
                                        f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ <b>{crystals_per_user}</b> üíé "
                                        f"—Å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ä–∞–∑–¥–∞—á–∏.")
                                await bot.send_message(user['user_id'], text, parse_mode=HTML)
                            except:
                                pass
                            await asyncio.sleep(3)

                        text = (f"üéâ –†–∞–∑–¥–∞—á–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –ë—ã–ª–æ —Ä–∞–∑–¥–∞–Ω–æ "
                                f"<b>{int(spread_crystals)} üíé</b>. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ê—é–º–∏.")
                        await bot.send_message(config.CHAT_ID, text, parse_mode=HTML)
                except Exception as e:
                    await bot.send_message(config.ADMIN_ID, f"[—Ü–∏–∫–ª-—Ä–∞–∑–¥–∞—á–∞]: {e}")

            elif can_process("groups_control", 600) and not config.DEBUG_MODE:
                now = datetime.datetime.now()
                last_controlling = await storage.get_temp_storage("lastGroupControl")
                day = datetime.timedelta(seconds=86400)

                if config.DEBUG_MODE:
                    print(f"last_controlling: {last_controlling}")

                # –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ —Å—É—Ç–æ–∫ –∏–ª–∏ –Ω–µ—Ç –ø—Ä–æ—à–ª–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.
                if not last_controlling or now >= datetime.datetime.fromtimestamp(int(last_controlling)) + day:

                    # –û—Ç–º–µ—á–∞–µ–º –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è.
                    await storage.update_temp_storage("lastGroupControl", int(now.timestamp()))

                    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø—ã.
                    groups_list = await storage.get_groups()

                    if not groups_list:
                        continue

                    total_members = 0  # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                    members_paid = 0  # –°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–µ–π —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã –ª–∏–¥–µ—Ä—É.
                    leaders_paid = 0  # –°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–µ–π (—à—Ç—Ä–∞—Ñ–æ–≤) —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã –ª–∏–¥–µ—Ä–∞.

                    members_good = 0  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –æ–ø–ª–∞—Ç–∏–ª–∏ –≤–∑–Ω–æ—Å.
                    members_bad = 0  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ù–ï –æ–ø–ª–∞—Ç–∏–ª–∏ –≤–∑–Ω–æ—Å.
                    members_poor = 0  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –∑–∞ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è —à—Ç—Ä–∞—Ñ (–Ω–∏–∑–∫–∏–π –±–∞–ª–∞–Ω—Å).

                    text = ("üìñ <b>–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å–ø–∏—Å–∞–Ω–∏—è –≤–∑–Ω–æ—Å–æ–≤ –≤ –≥—Ä—É–ø–ø–∞—Ö</b>\n"
                            f"–ì—Ä—É–ø–ø –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: <b>{len(groups_list)}</b>\n\n"
                            f"–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º: @reireireime")
                    await bot.send_message(config.CHAT_ID, text, parse_mode=HTML)
                    await asyncio.sleep(3)

                    for group_info in groups_list:
                        try:
                            group = entities.Group(storage, group_info['team_id'])
                            group.load_from_dict(group_info)

                            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –≥—Ä—É–ø–ø—ã.
                            await group.update_members()

                            # –ü–æ–ª—É—á–∞–µ–º –≤–µ–ª–∏—á–∏–Ω—É –≤–∑–Ω–æ—Å–∞ –≤ –≥—Ä—É–ø–ø—É.
                            tax = int(group.tax)
                            # –í—ã—á–∏—Å–ª—è–µ–º —Å—É–º–º—É —à—Ç—Ä–∞—Ñ–∞.
                            fine_from_tax = int(group.tax * 1.1)

                            assert tax >= config.PRICE_GROUP_DAILY, f'–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–∞–ª–æ–≥ –¥–ª—è –≥—Ä—É–ø–ø—ã: {tax}'
                            assert group.leader_id, f'–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ª–∏–¥–µ—Ä —É –≥—Ä—É–ø–ø—ã: {group.group_id}'

                            group_members_paid = 0  # –°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–µ–π —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã –ª–∏–¥–µ—Ä—É.
                            group_leaders_paid = 0  # –°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–µ–π (—à—Ç—Ä–∞—Ñ–æ–≤) —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã –ª–∏–¥–µ—Ä–∞.

                            group_members_good = 0  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –æ–ø–ª–∞—Ç–∏–ª–∏ –≤–∑–Ω–æ—Å.
                            group_members_bad = 0  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ù–ï –æ–ø–ª–∞—Ç–∏–ª–∏ –≤–∑–Ω–æ—Å.
                            group_members_poor = 0  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –∑–∞ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è —à—Ç—Ä–∞—Ñ (–Ω–∏–∑–∫–∏–π –±–∞–ª–∞–Ω—Å).

                            # –ü–æ–ª—É—á–∞–µ–º –ª–∏–¥–µ—Ä–∞ –≥—Ä—É–ø–ø—ã.
                            leader = await group.get_leader()

                            for member_info in group.members:
                                member = entities.User(storage, user_id=member_info['user_id'])
                                member.load_from_dict(member_info)

                                # –ï—Å–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏–¥–µ—Ä–æ–º –≥—Ä—É–ø–ø—ã.
                                if member.user_id != group.leader_id:
                                    try:
                                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ö–≤–∞—Ç–∏—Ç –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–∞–ª–∞–Ω—Å–∞.
                                        if member.balance >= tax:
                                            # –°–ø–∏—Å—ã–≤–∞–µ–º —Å—É–º–º—É –≤–∑–Ω–æ—Å–∞.
                                            await member.pay(tax)
                                            # –ù–∞—á–∏—Å–ª—è–µ–º –µ–≥–æ –ª–∏–¥–µ—Ä—É.
                                            await leader.earn(tax)
                                            # –†–µ–≥–∏—Å—Ç—Ä–∏—É–µ–º –æ–ø–ª–∞—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
                                            await storage.add_payment(member.user_id, group.leader_id,
                                                                      db.PaymentType.group_member_tax,
                                                                      tax, db.Currency.coins)
                                            group_members_paid += tax
                                            group_members_good += 1
                                        else:
                                            group_members_bad += 1

                                        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—É–º–º—É —à—Ç—Ä–∞—Ñ–∞, –µ—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–µ–Ω—å—à–µ {MIN_MEMBER_BALANCE} (1000 –º–æ–Ω–µ—Ç–æ–∫).
                                        if member.balance < config.MIN_MEMBER_BALANCE:
                                            group_members_poor += 1
                                            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—É–º–º—É —à—Ç—Ä–∞—Ñ–∞ –Ω–∞ fine_from_tax (110% –æ—Ç tax).
                                            group_leaders_paid += fine_from_tax

                                    except Exception as e:
                                        await bot.send_message(config.ADMIN_ID, f"[—Ü–∏–∫–ª-–≥—Ä—É–ø–ø–∞-—É—á–∞—Å—Ç–Ω–∏–∫]: {e}")

                            # –°–ø–∏—Å—ã–≤–∞–µ–º —à—Ç—Ä–∞—Ñ —Å –ª–∏–¥–µ—Ä–∞, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å.
                            if group_leaders_paid > 0:
                                fine = leader.balance if group_leaders_paid > leader.balance else group_leaders_paid
                                fine = int(fine)
                            else:
                                fine = 0

                            if fine:
                                await leader.pay(fine)
                                await storage.add_payment(leader.user_id, None, db.PaymentType.group_leader_fine,
                                                          fine, db.Currency.coins)

                            profit = int(group_members_paid - fine)

                            # –ù–∞—á–∏—Å–ª—è–µ–º –æ–±—â–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏.
                            total_members += (len(group.members) - 1)
                            members_paid += group_members_paid  # –°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–µ–π —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã –ª–∏–¥–µ—Ä—É.
                            leaders_paid += fine  # –°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–µ–π (—à—Ç—Ä–∞—Ñ–æ–≤) —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã –ª–∏–¥–µ—Ä–∞.

                            members_good += group_members_good  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –æ–ø–ª–∞—Ç–∏–ª–∏ –≤–∑–Ω–æ—Å.
                            members_bad += group_members_bad  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ù–ï –æ–ø–ª–∞—Ç–∏–ª–∏ –≤–∑–Ω–æ—Å.
                            members_poor += group_members_poor  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –∑–∞ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è —à—Ç—Ä–∞—Ñ (–Ω–∏–∑–∫–∏–π –±–∞–ª–∞–Ω—Å).

                            # –§–æ—Ä–º–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ª–∏–¥–µ—Ä–∞.
                            text = ("üìÅ <b>–û—Ç—á–µ—Ç –æ —Å–ø–∏—Å–∞–Ω–∏—è—Ö –≤–∑–Ω–æ—Å–∞</b>\n"
                                    f"–í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: <b>{len(group.members)}</b>\n\n"
                                    f"–û–ø–ª–∞—Ç–∏–ª–∏ –≤–∑–Ω–æ—Å: <b>{int(group_members_bad)}</b>\n"
                                    f"–ù–µ —Å–º–æ–≥–ª–∏ –æ–ø–ª–∞—Ç–∏—Ç—å –≤–∑–Ω–æ—Å: <b>{int(group_members_bad)}</b>\n"
                                    f"–° –Ω–∏–∑–∫–∏–º –±–∞–ª–∞–Ω—Å–æ–º: <b>{int(group_members_poor)}</b>\n\n"
                                    f"–ù–∞—á–∏—Å–ª–µ–Ω–æ: <b>{int(group_members_paid)}</b> ü™ô\n"
                                    f"–°–ø–∏—Å–∞–Ω–æ —à—Ç—Ä–∞—Ñ–æ–≤: -<b>{int(fine)}</b> ü™ô\n"
                                    f"–ò—Ç–æ–≥–æ: <b>{profit}</b> ü™ô")
                            try:
                                await bot.send_message(leader.user_id, text, parse_mode=HTML)
                            except:
                                pass
                            await asyncio.sleep(3)
                        except Exception as e:
                            await bot.send_message(config.ADMIN_ID, f"[—Ü–∏–∫–ª-–≥—Ä—É–ø–ø–∞]: {e}")

                    # –§–æ—Ä–º–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —á–∞—Ç.
                    text = ("üóÑÔ∏è <b>–°–ø–∏—Å–∞–Ω–∏—è –≤–∑–Ω–æ—Å–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ</b>\n"
                            f"–í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: <b>{int(total_members)}</b>\n\n"
                            f"–û–ø–ª–∞—Ç–∏–ª–∏ –≤–∑–Ω–æ—Å: <b>{int(members_good)}</b>\n"
                            f"–ù–µ —Å–º–æ–≥–ª–∏ –æ–ø–ª–∞—Ç–∏—Ç—å –≤–∑–Ω–æ—Å: <b>{int(members_bad)}</b>\n"
                            f"–° –Ω–∏–∑–∫–∏–º –±–∞–ª–∞–Ω—Å–æ–º: <b>{int(members_poor)}</b>\n\n"
                            f"–ù–∞—á–∏—Å–ª–µ–Ω–æ –ª–∏–¥–µ—Ä–∞–º: <b>{int(members_paid)}</b> ü™ô\n"
                            f"–°–ø–∏—Å–∞–Ω–æ —à—Ç—Ä–∞—Ñ–æ–≤ –ª–∏–¥–µ—Ä–∞–º: -<b>{int(leaders_paid)}</b> ü™ô\n"
                            f"–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: <b>{int(members_paid - leaders_paid)}</b> ü™ô\n\n"
                            f"–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º: @reireireime")
                    await bot.send_message(config.CHAT_ID, text, parse_mode=HTML)

        except Exception as e:
            await bot.send_message(config.ADMIN_ID, f"[—Ü–∏–∫–ª]: {e}")


async def start_chat_tasks(_):
    global BOT_PROFILE
    BOT_PROFILE = await bot.get_me()
    asyncio.create_task(process_chat_tasks())


if __name__ == '__main__':
    executor.start_polling(dp, on_startup=start_chat_tasks)
