import asyncio

import datetime

import aiofiles
import aiogram
from aiogram import Bot, types

import config
import utils
import db
import entities
import keyboards

HTML = "html"

lock_market = asyncio.Lock()


async def notify(bot: aiogram.Bot, text: str):
    try:
        if config.LOGS_CHANNEL_ID:
            await bot.send_message(config.LOGS_CHANNEL_ID, text, parse_mode=HTML)
    except:
        pass


async def relink_bank(event: types.CallbackQuery, user: entities.User):
    person_id = int(event.data.split("_")[1])
    password = event.data.split("_")[2]

    if person_id != user.user_id:
        await event.answer("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–æ–≤–∞–Ω–æ –Ω–µ –≤–∞–º", show_alert=True)
        return

    if not (user.crystals >= config.PRICE_LINK_CRYSTALS):
        text = (f"‚ùå –£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤ –¥–ª—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏\n"
                f"–¢—Ä–µ–±—É–µ—Ç—Å—è: {config.PRICE_LINK_CRYSTALS} üíé.")
        await event.answer(text, show_alert=True)
        return

    user_banks = await user.get_banks()
    if len(user_banks) >= config.MAX_BANKS_COUNT:
        text = (f"‚ùå –ù–µ–ª—å–∑—è —Å–æ–∑–¥–∞—Ç—å –±–æ–ª—å—à–µ {config.MAX_BANKS_COUNT} –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö —Å—á–µ—Ç–æ–≤. \n"
                f"–û–±–Ω–∞–ª–∏—á—å—Ç–µ –æ–¥–∏–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å—á–µ—Ç, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π.")
        await event.answer(text, show_alert=True)
        return

    relinked_bank = await user.relink_bank(password)
    if relinked_bank:
        text = "‚òëÔ∏è –°—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –≤–∞—à–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É"
        await event.message.edit_text(text)

        try:
            owner_id: int = relinked_bank['user_id']
            if owner_id != user.user_id:
                text_2 = ("‚ö†Ô∏è <b>–ö—Ç–æ-—Ç–æ –ø–µ—Ä–µ–ø—Ä–∏–≤—è–∑–∞–ª –≤–∞—à —Å—á–µ—Ç</b>\n"
                          f"–ù–æ–º–µ—Ä —Å—á–µ—Ç–∞: <b>{relinked_bank['account_id']}</b>")
                await event.bot.send_message(owner_id, text_2, parse_mode=HTML)
        except:
            ...

    else:
        text = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–≤—è–∑–∞—Ç—å —Å—á–µ—Ç"
        await event.message.edit_text(text)


async def unbank(event: types.CallbackQuery, user: entities.User):
    person_id = int(event.data.split("_")[1])
    password = event.data.split("_")[2]

    if person_id != user.user_id:
        await event.answer("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–æ–≤–∞–Ω–æ –Ω–µ –≤–∞–º", show_alert=True)
        return

    if user.balance >= config.PRICE_UNBANK:
        if not (user.crystals >= config.PRICE_UNBANK_CRYSTALS):
            text = (f"‚ùå –£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤ –¥–ª—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏\n"
                    f"–¢—Ä–µ–±—É–µ—Ç—Å—è: {config.PRICE_UNBANK_CRYSTALS} üíé.")
            await event.answer(text, show_alert=True)
            return

    fee = utils.calc_fee(user.balance, config.FEE_UNBANK, config.PRICE_UNBANK)
    bank_result = await user.unbank(password, fee)

    if bank_result:
        owner_id = bank_result['user_id']
        owner = await entities.get_user_by_id(user.get_storage(), owner_id)

        start_sum: int = bank_result['balance']
        now_sum: int = bank_result['unbankSum']
        bank_id: int = bank_result['account_id']

        created_time: datetime.datetime = bank_result['created']
        time_passed: int = int(datetime.datetime.now().timestamp() - created_time.timestamp())
        show_time = utils.format_time(time_passed)

        text = (f"üí∏ <b>–°—á—ë—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–∞–ª–∏—á–µ–Ω</b>\n"
                f"ID —Å—á–µ—Ç–∞: <code>{bank_id}</code>\n"
                f"–ü–∞—Ä–æ–ª—å: <code>{password}</code>\n"
                f"–ü—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏: <b>{utils.format_balance(start_sum)} ü™ô</b>\n"
                f"–°–µ–π—á–∞—Å: <b>{utils.format_balance(now_sum)} ü™ô</b>\n"
                f"–ü—Ä–æ—à–ª–æ: <i>{show_time}</i>\n\n"
                f"üë§ <b>–í–ª–∞–¥–µ–ª–µ—Ü —Å—á–µ—Ç–∞</b>\n{owner}")
        await event.message.edit_text(text, parse_mode=HTML)

        try:
            if bank_result['user_id'] != user.user_id:
                text_2 = ("‚ö†Ô∏è <b>–ö—Ç–æ-—Ç–æ —Å–Ω—è–ª –º–æ–Ω–µ—Ç–∫–∏ —Å–æ —Å—á–µ—Ç–∞</b>\n"
                          f"–ù–æ–º–µ—Ä —Å—á–µ—Ç–∞: <b>{bank_result['account_id']}</b>\n"
                          f"–ü—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏: <b>{utils.format_balance(bank_result['balance'])} ü™ô</b>\n"
                          f"–ò—Ç–æ–≥: <b>{utils.format_balance(bank_result['unbankSum'])} ü™ô</b>\n"
                          f"–ü–∞—Ä–æ–ª—å: <tg-spoiler>***{bank_result['a_password'][-2:]}</tg-spoiler>")
                await event.bot.send_message(bank_result['user_id'], text_2, parse_mode=HTML)
        except:
            ...

    else:
        text = ("‚ùå <b>–ë–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ —Å—á–µ—Ç–∞ —Å —Ç–∞–∫–∏–º –ø–∞—Ä–æ–ª–µ–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç</b>\n"
                f"–í –∫–∞—á–µ—Å—Ç–≤–µ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏ –±–∞–Ω–∫ —Å–ø–∏—Å–∞–ª —Å –≤–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ <b>{fee} –º–æ–Ω–µ—Ç–æ–∫</b>")
        await event.message.edit_text(text, parse_mode=HTML)


async def complete_offers(storage: db.Storage, bot: Bot):
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å –º–∞—Ä–∫–µ—Ç–∞.
    offers = await storage.get_market_offers()

    sell_offers = offers["sell"]
    buy_offers = offers["buy"]

    # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –∑–∞—è–≤–∫–∏ –Ω–∞ –ø–æ–∫—É–ø–∫—É, –Ω–∞—á–∏–Ω–∞—è —Å —Å–∞–º–æ–π –±–æ–ª—å—à–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏.
    for buy_offer in buy_offers:
        # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –ø—Ä–æ–¥–∞–∂—É, –Ω–∞—á–∏–Ω–∞—è —Å —Å–∞–º–æ–π –º–∞–ª–µ–Ω—å–∫–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏.
        for sell_offer in sell_offers:

            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞.
            if not (sell_offer['crystals'] > 0 and buy_offer['crystals'] > 0):
                continue

            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ UID —Å–æ–≤–ø–∞–¥–∞—é—Ç.
            if sell_offer['user_id'] == buy_offer['user_id']:
                continue

            # –¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏ –±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏.
            if buy_offer['price'] >= sell_offer['price']:
                # –ö—Ä–∏—Å—Ç–∞–ª–ª–æ–≤ –Ω—É–∂–Ω–æ –∫—É–ø–∏—Ç—å.
                need_crystals_to_buy = buy_offer['crystals']
                # –ö—Ä–∏—Å—Ç–∞–ª–ª–æ–≤ –ø—Ä–æ–¥–∞—ë—Ç—Å—è.
                can_buy_crystals = sell_offer['crystals']

                # –í—ã—á–∏—Å–ª—è–µ–º —Å–∫–æ–ª—å–∫–æ –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤ –ø–æ–∫—É–ø–∞–µ–º –ø–æ —ç—Ç–æ–º—É –æ—Ä–¥–µ—Ä—É.
                crystals_to_buy = min([need_crystals_to_buy, can_buy_crystals])
                # –¶–µ–Ω—É –ø–æ–∫—É–ø–∫–∏.
                price = sell_offer['price']
                # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏.
                max_price = buy_offer['price']
                # –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å.
                cost = int(price * crystals_to_buy)

                # –ò–∑–º–µ–Ω—è–µ–º –æ—Ä–¥–µ—Ä—ã.
                buy_offer['crystals'] = int(buy_offer['crystals'] - crystals_to_buy)
                sell_offer['crystals'] = int(sell_offer['crystals'] - crystals_to_buy)

                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –≤ –ë–î.
                await storage.update_offer(buy_offer)
                await storage.update_offer(sell_offer)

                # –ü–æ–∫—É–ø–∞—Ç–µ–ª—å. –í—ã–¥–∞–µ–º –∫—Ä–∏—Å—Ç–∞–ª–ª.
                await storage.add_user_crystals(buy_offer['user_id'], crystals_to_buy)

                # –ï—Å–ª–∏ –∫—É–ø–∏–ª–∏ –≤—ã–≥–æ–¥–Ω–µ–µ, —Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–Ω–µ—Ç–∫–∏.
                coins_back = int((max_price - price) * crystals_to_buy)
                if coins_back:
                    await storage.increase_user_balance(buy_offer['user_id'], coins_back)

                # –ü—Ä–æ–¥–∞–≤–µ—Ü. –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –±–∞–ª–∞–Ω—Å.
                await storage.increase_user_balance(sell_offer['user_id'], cost)

                # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏.
                for _ in range(crystals_to_buy):
                    await storage.add_payment(buy_offer['user_id'], sell_offer['user_id'],
                                              db.PaymentType.market, price, db.Currency.coins)

                # –£–≤–µ–¥–æ–º–ª—è–µ–º.
                # –ü–æ–∫—É–ø–∞—Ç–µ–ª—å.
                text = (f"üíé <b>–í—ã –∫—É–ø–∏–ª–∏ –∫—Ä–∏—Å—Ç–∞–ª–ª—ã</b>\n"
                        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <b>{crystals_to_buy} üíé</b>\n"
                        f"–¶–µ–Ω–∞ –∑–∞ –∫—Ä–∏—Å—Ç–∞–ª–ª: <b>{price} ü™ô</b>")
                if coins_back:
                    text += (f"\n–í–æ–∑–≤—Ä–∞—â–µ–Ω–æ: <b>{coins_back} ü™ô</b>\n\n"
                             f"üéâ <i>–ü–æ–∫—É–ø–∫–∞ –æ–±–æ—à–ª–∞—Å—å –¥–µ—à–µ–≤–ª–µ</i>")

                try:
                    await bot.send_message(buy_offer['user_id'], text, parse_mode=HTML)
                except:
                    pass

                # –ü—Ä–æ–¥–∞–≤–µ—Ü.
                text = (f"üí∞ <b>–í—ã –ø—Ä–æ–¥–∞–ª–∏ –∫—Ä–∏—Å—Ç–∞–ª–ª—ã</b>\n"
                        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <b>{crystals_to_buy} üíé</b>\n"
                        f"–¶–µ–Ω–∞ –∑–∞ –∫—Ä–∏—Å—Ç–∞–ª–ª: <b>{price} ü™ô</b>\n"
                        f"–ò—Ç–æ–≥–æ: <b>+{cost} ü™ô</b>")
                try:
                    await bot.send_message(sell_offer['user_id'], text, parse_mode=HTML)
                except:
                    pass

                # –í —á–∞—Ç.
                text = ("ü§ù <b>–ù–æ–≤–∞—è —Å–¥–µ–ª–∫–∞ –Ω–∞ –±–∏—Ä–∂–µ</b>\n"
                        f"–ü—Ä–æ–¥–∞–Ω–æ: <b>{utils.format_balance(crystals_to_buy)} üíé</b>\n"
                        f"–¶–µ–Ω–∞ –∑–∞ –∫—Ä–∏—Å—Ç–∞–ª–ª: <b>{utils.format_balance(price)} ü™ô</b>\n"
                        f"–°—É–º–º–∞ —Å–¥–µ–ª–∫–∏: <b>{utils.format_balance(cost)} ü™ô</b>")
                try:
                    await bot.send_message(config.CHAT_ID, text, parse_mode=HTML)
                except:
                    pass


async def process_market_click(call: types.CallbackQuery, user: entities.User):
    person_id = int(call.data.split("_")[-1])

    if person_id != user.user_id:
        text = "‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–æ–≤–∞–Ω–æ –Ω–µ –≤–∞–º"
        await call.answer(text, show_alert=True)
        return

    if call.data.startswith("back_market_"):
        await show_market(call, user)

    elif call.data.startswith("getback_crystals_"):
        returned_crystals = await user.return_crystals()
        if returned_crystals:
            text = f"‚òëÔ∏è –í–æ–∑–≤—Ä–∞—â–µ–Ω–æ —Å –±–∏—Ä–∂–∏ –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤: {returned_crystals}"
        else:
            text = "‚ÑπÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤ –Ω–∞ –±–∏—Ä–∂–µ"
        await call.answer(text, show_alert=True)

    elif call.data.startswith("getback_coins_"):
        returned_coins = await user.return_coins()
        if returned_coins:
            text = f"‚òëÔ∏è –í–æ–∑–≤—Ä–∞—â–µ–Ω–æ —Å –±–∏—Ä–∂–∏: {utils.format_balance(returned_coins)} ü™ô"
        else:
            text = "‚ÑπÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –º–æ–Ω–µ—Ç–æ–∫ –Ω–∞ –±–∏—Ä–∂–µ"
        await call.answer(text, show_alert=True)

    elif call.data.startswith("buy_crystals_") or call.data.startswith("sell_crystals_"):
        buy_mode = call.data.startswith("buy_crystals_")

        offers_list = await user.get_storage().get_market_offers()
        if buy_mode:
            offers = offers_list["sell"]
        else:
            offers = offers_list["buy"]

        if buy_mode:
            text = ("üí∏ <b>–ü–æ–∫—É–ø–∫–∞ –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤</b>\n\n"
                    "–ù–∏–∂–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É –∫—Ä–∏—Å—Ç–∞–ª–ª—ã. –í—ã –º–æ–∂–µ—Ç–µ "
                    "–±—ã—Å—Ç—Ä–æ –∫—É–ø–∏—Ç—å 1 –∫—Ä–∏—Å—Ç–∞–ª–ª –ø–æ –Ω–∞–∂–∞—Ç–∏—é –Ω–∞ –≤–µ—Ä—Ö–Ω—é—é –∫–Ω–æ–ø–∫—É –∑–∞ —Å–∞–º—É—é –≤—ã–≥–æ–¥–Ω—É—é —Ü–µ–Ω—É "
                    "–Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –ø–æ–∫—É–ø–∫—É –ø–æ —Å–≤–æ–µ–π —Ü–µ–Ω–µ:\n"
                    "<code>/buy [–∫–æ–ª-–≤–æ] [—Ü–µ–Ω–∞ –∑–∞ —à—Ç]</code>")
        else:
            text = ("üí∞ <b>–ü—Ä–æ–¥–∞–∂–∞ –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤</b>\n\n"
                    "–ù–∏–∂–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –∑–∞—è–≤–∫–∏ –Ω–∞ –ø–æ–∫—É–ø–∫—É –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤. –í—ã –º–æ–∂–µ—Ç–µ "
                    "–±—ã—Å—Ç—Ä–æ –ø—Ä–æ–¥–∞—Ç—å 1 –∫—Ä–∏—Å—Ç–∞–ª–ª –ø–æ –Ω–∞–∂–∞—Ç–∏—é –Ω–∞ –≤–µ—Ä—Ö–Ω—é—é –∫–Ω–æ–ø–∫—É –∑–∞ —Å–∞–º—É—é –≤—ã–≥–æ–¥–Ω—É—é —Ü–µ–Ω—É "
                    "–Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∏–ª–∏ –≤—ã—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–∏ –∫—Ä–∏—Å—Ç–∞–ª–ª—ã –Ω–∞ –ø—Ä–æ–¥–∞–∂—É –ø–æ —Å–≤–æ–µ–π —Ü–µ–Ω–µ:\n"
                    "<code>/sell [–∫–æ–ª-–≤–æ] [—Ü–µ–Ω–∞ –∑–∞ —à—Ç]</code>")
        await call.message.edit_text(text, parse_mode=HTML, reply_markup=keyboards.market_offers_menu(user.user_id,
                                                                                                      offers))

    elif call.data.startswith("offer_"):
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ä–¥–µ—Ä–µ.
            offer_id = int(call.data.split("_")[1])
            offer = await user.get_storage().get_market_offer(offer_id)

            assert offer and offer['crystals'], "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —É—Å—Ç–∞—Ä–µ–ª–æ"
            assert offer_id == offer["offer_id"], "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∑–∞—è–≤–∫–∏"

            owner_id: int = offer["user_id"]
            crystals: int = offer["crystals"]
            price: int = offer["price"]
            direction: str = offer["direction"]  # sell, buy

            assert direction in ("sell", "buy"), "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏"
            assert price and crystals, "–ü—É—Å—Ç–∞—è –∑–∞—è–≤–∫–∞"
            assert user.user_id != owner_id, "–ù–µ–ª—å–∑—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å–æ —Å–≤–æ–µ–π –∂–µ –∑–∞—è–≤–∫–æ–π"

            if direction == "sell":
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–∫—É–ø–∞–µ—Ç –∫—Ä–∏—Å—Ç–∞–ª–ª.
                assert user.balance >= price, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç–æ–∫ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ"

            else:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–¥–∞—ë—Ç –∫—Ä–∏—Å—Ç–∞–ª–ª.
                assert user.crystals >= 1, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ"

            buy_crystal_confirm_cooldown = 5
            cooldown_name = f"buyCrystalOfferId{offer_id}"
            if user.cooldown(cooldown_name, buy_crystal_confirm_cooldown):
                await call.answer(
                    f"üÜó –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ–∫—É–ø–∫–∏ –≤—Ç–æ—Ä—ã–º –Ω–∞–∂–∞—Ç–∏–µ–º –≤ —Ç–µ—á–µ–Ω–∏–µ {buy_crystal_confirm_cooldown} —Å–µ–∫—É–Ω–¥")
                return
            user.reset_value(cooldown_name)

            if direction == "sell":
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–∫—É–ø–∞–µ—Ç –∫—Ä–∏—Å—Ç–∞–ª–ª.
                await user.buy_crystals(1, price)
                text = (f"–í—ã —Å–æ–∑–¥–∞–ª–∏ –∑–∞—è–≤–∫—É –Ω–∞ –ø–æ–∫—É–ø–∫—É 1 üíé –∑–∞ {price} ü™ô\n"
                        f"–ê—é–º–∏ –æ–ø–æ–≤–µ—Å—Ç–∏—Ç –≤–∞—Å –≤ –ª—Å, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –≤–∞—à –∑–∞–ø—Ä–æ—Å –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω.")
            else:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–¥–∞—ë—Ç –∫—Ä–∏—Å—Ç–∞–ª–ª.
                await user.sell_crystals(1, price)
                text = (f"–í—ã —Å–æ–∑–¥–∞–ª–∏ –∑–∞—è–≤–∫—É –Ω–∞ –ø—Ä–æ–¥–∞–∂—É 1 üíé –∑–∞ {price} ü™ô\n"
                        f"–ê—é–º–∏ –æ–ø–æ–≤–µ—Å—Ç–∏—Ç –≤–∞—Å –≤ –ª—Å, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –≤–∞—à –∑–∞–ø—Ä–æ—Å –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω.")
            await call.answer(text, show_alert=True)

            async with lock_market:
                # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫.
                await complete_offers(user.get_storage(), call.bot)

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ.
                call.data = f"buy_crystals_{user.user_id}" if direction == "sell" else f"sell_crystals_{user.user_id}"
                await process_market_click(call, user)

        except Exception as e:
            await call.answer(f"‚ùå {e}", show_alert=True)


async def show_market(event: types.Message | types.CallbackQuery, user: entities.User):
    if isinstance(event, types.CallbackQuery):
        person_id = int(event.data.split("_")[-1])

        if person_id != user.user_id:
            text = "‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–æ–≤–∞–Ω–æ –Ω–µ –≤–∞–º"
            await event.answer(text, show_alert=True)
            return

    offers = await user.get_storage().get_market_offers()

    sell_offers = offers["sell"]
    buy_offers = offers["buy"]

    # –í—ã—á–∏—Å–ª—è–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏.
    min_sell_price = min([o['price'] for o in sell_offers]) if sell_offers else '-'
    sell_offers_crystals = sum([o['crystals'] for o in sell_offers])

    max_buy_price = max([o['price'] for o in buy_offers]) if buy_offers else '-'
    buy_offers_crystals = sum([o['crystals'] for o in buy_offers])

    text = (f"üíé <b>–ë–∏—Ä–∂–∞ –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤</b>\n\n"
            f"<u>–ö—É–ø–∏—Ç—å –∫—Ä–∏—Å—Ç–∞–ª–ª—ã</u>\n"
            f"–í—ã—Å—Ç–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É: <b>{utils.format_balance(sell_offers_crystals)} üíé</b>\n"
            f"–°–∞–º–æ–µ –≤—ã–≥–æ–¥–Ω–æ–µ: <b>{utils.format_balance(min_sell_price)} ü™ô</b>\n\n"
            f"<u>–ü—Ä–æ–¥–∞—Ç—å –∫—Ä–∏—Å—Ç–∞–ª–ª—ã</u>\n"
            f"–°–ø—Ä–æ—Å –¥–ª—è –ø–æ–∫—É–ø–∫—É: <b>{utils.format_balance(buy_offers_crystals)} üíé</b>\n"
            f"–°–∞–º–æ–µ –≤—ã–≥–æ–¥–Ω–æ–µ: <b>{utils.format_balance(max_buy_price)} ü™ô</b>\n\n"
            f"<u>–í—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫ –Ω–∞ –±–∏—Ä–∂–µ</u>\n"
            f"–°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –ø–æ–∫—É–ø–∫—É:\n<code>/buy [–∫–æ–ª-–≤–æ] [—Ü–µ–Ω–∞ –∑–∞ —à—Ç]</code>\n"
            f"–í—ã—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ –ø—Ä–æ–¥–∞–∂—É:\n<code>/sell [–∫–æ–ª-–≤–æ] [—Ü–µ–Ω–∞ –∑–∞ —à—Ç]</code>")

    rpl = keyboards.market_menu(user.user_id)
    if isinstance(event, types.CallbackQuery):
        await event.message.edit_text(text, parse_mode=HTML, reply_markup=rpl)
    else:
        await event.reply(text, parse_mode=HTML, reply_markup=rpl)


async def process_market_command(message: types.Message, user: entities.User):
    try:
        cm = message.text.split()[0]
        crystals = message.text.split()[1]
        price = message.text.split()[2]

        assert cm in ("/buy", "/sell"), "–ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞"
        assert crystals.isdigit(), "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º"
        assert price.isdigit(), "–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º"

        crystals = int(crystals)
        price = int(price)

        assert 1 <= crystals <= config.MAX_INT_UNSIGNED, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 4.2 –º–ª—Ä–¥"
        assert 1 <= price <= config.MAX_INT_UNSIGNED, "–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ 4.2 –º–ª—Ä–¥ –º–æ–Ω–µ—Ç–æ–∫"

        assert (await user.can_send()), ("<b>–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–∫—É–ø–∞—Ç—å/–ø—Ä–æ–¥–∞–≤–∞—Ç—å –∫—Ä–∏—Å—Ç–∞–ª–ª—ã</b>\n"
                                         f"–° –º–æ–º–µ–Ω—Ç–∞ –Ω–∞—á–∞–ª–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –ø–æ –≤–∞—à–µ–º—É –≤–æ–ø—Ä–æ—Å—É "
                                         f"–Ω–µ –ø—Ä–æ—à–ª–æ {utils.format_time(config.TIME_TO_POLL)}")

        if cm == "/buy":
            now_in_market = (await user.get_market_crystals_count())["buy"]
            assert crystals + now_in_market <= config.MAX_MARKET_BUY_CRYSTALS, (
                "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–æ–∫ –Ω–∞ –ø–æ–∫—É–ø–∫—É "
                f"–±–æ–ª–µ–µ —á–µ–º <b>{config.MAX_MARKET_BUY_CRYSTALS} üíé</b>")

            # –í—ã—Å—Ç–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É –Ω–∞ –ø–æ–∫—É–ø–∫—É –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤.
            cost = int(price * crystals)
            assert user.balance >= cost, "–£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –º–æ–Ω–µ—Ç–æ–∫"
            await user.buy_crystals(crystals, price)

            text = (f"üìù <b>–ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É —Å–æ–∑–¥–∞–Ω–∞</b>\n"
                    f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <b>{utils.format_balance(crystals)} üíé</b>\n"
                    f"–¶–µ–Ω–∞ –∑–∞ –∫—Ä–∏—Å—Ç–∞–ª–ª: <b>{utils.format_balance(price)} ü™ô</b>\n"
                    f"–î–ª—è –ø–æ–∫—É–ø–∫–∏ –∑–∞–º–æ—Ä–æ–∂–µ–Ω–æ: <b>{utils.format_balance(cost)} ü™ô</b>")

        else:
            # –í—ã—Å—Ç–∞–≤–ª—è–µ–º –∫—Ä–∏—Å—Ç–∞–ª–ª—ã –Ω–∞ –ø—Ä–æ–¥–∞–∂—É.
            assert user.crystals >= crystals, "–£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤"
            await user.sell_crystals(crystals, price)

            text = (f"‚òëÔ∏è <b>–ö—Ä–∏—Å—Ç–∞–ª–ª—ã –≤—ã—Å—Ç–∞–≤–ª–µ–Ω—ã –Ω–∞ –ø—Ä–æ–¥–∞–∂—É</b>\n"
                    f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <b>{utils.format_balance(crystals)} üíé</b>\n"
                    f"–¶–µ–Ω–∞ –∑–∞ –∫—Ä–∏—Å—Ç–∞–ª–ª: <b>{utils.format_balance(price)} ü™ô</b>")

        await message.answer(text, parse_mode=HTML)
        async with lock_market:
            await complete_offers(user.get_storage(), message.bot)

    except Exception as e:
        await message.answer(f"‚ùå {e}", parse_mode=HTML)


async def group_tax_control(event: types.Message, user: entities.User):
    group = user.get_group()
    if not group.exists():
        text = "‚ÑπÔ∏è –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–∞–∫–æ–π-–ª–∏–±–æ –≥—Ä—É–ø–ø–µ"
        await event.answer(text, parse_mode=HTML)
        return

    if not (await group.is_leader(user.user_id)):
        text = "‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –ª–∏–¥–µ—Ä–æ–º –≥—Ä—É–ø–ø—ã"
        await event.answer(text, parse_mode=HTML)
        return

    new_tax_string = event.text.split()[1]
    if not new_tax_string.isdigit():
        text = f"‚ùå –°—É–º–º–∞ –≤–∑–Ω–æ—Å–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º –æ—Ç {config.PRICE_GROUP_DAILY} –¥–æ 4.2 –º–ª—Ä–¥"
        await event.answer(text, parse_mode=HTML)
        return

    new_tax = int(new_tax_string)
    if not (config.PRICE_GROUP_DAILY <= new_tax <= config.MAX_INT_UNSIGNED):
        text = f"‚ùå –°—É–º–º–∞ –≤–∑–Ω–æ—Å–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º –æ—Ç {config.PRICE_GROUP_DAILY} –¥–æ 4.2 –º–ª—Ä–¥"
        await event.answer(text, parse_mode=HTML)
        return

    old_tax = await group.get_tax()
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤–∑–Ω–æ—Å –≤ –≥—Ä—É–ø–ø–µ.
    await group.set_tax(new_tax)
    text = ("üÜó <b>–°—É–º–º–∞ –≤–∑–Ω–æ—Å–∞ –∏–∑–º–µ–Ω–µ–Ω–∞</b>\n"
            f"–ó–Ω–∞—á–µ–Ω–∏–µ: <b>{old_tax} -> {new_tax} ü™ô</b>\n\n"
            f"üìû <i>–ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ–ø–æ–≤–µ—Å—Ç–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã –æ–± —ç—Ç–æ–º</i>")
    await event.answer(text, parse_mode=HTML)


async def create_ad(event: types.CallbackQuery, user: entities.User, temp_storage: entities.TempStorage):
    protect_client_id = int(event.data.split("_")[-1])

    if user.user_id != protect_client_id:
        text = "‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–æ–≤–∞–Ω–æ –Ω–µ –≤–∞–º"
        await event.answer(text, show_alert=True)
        return

    if user.balance < config.PRICE_POST_AD:
        text = "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ"
        await event.answer(text, show_alert=True)
        return

    ad_text: str | None = temp_storage.value(user, "adText")
    temp_storage.reset(user)
    if not ad_text:
        text = "‚ùå –¢–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω"
        await event.answer(text, show_alert=True)
        return

    await user.post_ad(ad_text)
    text = (f"üì∞ <b>–ù–æ–≤–æ–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ</b>\n\n{ad_text}\n\n"
            f"<i>–û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –ø—Ä–æ–µ–∫—Ç–∞ –∏ –Ω–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫–∞–∫–∏–º-–ª–∏–±–æ "
            f"–æ–±—Ä–∞–∑–æ–º –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.</i>")
    await event.bot.send_message(config.CHAT_ID, text, parse_mode=HTML, disable_web_page_preview=True)

    text = f"üì∞ <b>–û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ</b>\n\n{ad_text}"
    await event.message.edit_text(text, parse_mode=HTML, disable_web_page_preview=True)


async def protect_mybank(event: types.CallbackQuery, user: entities.User):
    protect_client_id = int(event.data.split("_")[1])

    if user.user_id != protect_client_id:
        text = "‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–æ–≤–∞–Ω–æ –Ω–µ –≤–∞–º"
        await event.answer(text, show_alert=True)
        return

    group = user.get_group()
    group_level = await group.get_level()

    # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–≤—ã—à–µ–Ω–∏—è.
    protection_level = user.protect_level
    price = utils.calc_upgrade_hack_protect_price(protection_level)
    # –í—ã—á–∏—Å–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∏ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–Ω—Å –≤–∑–ª–æ–º–∞.
    now_hack_percentage = utils.calc_hack_percentage(protection_level, group_level)
    then_hack_percentage = utils.calc_hack_percentage(int(protection_level + 1), group_level)

    if now_hack_percentage <= 3:
        text = "‚ùå –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å—Ç–∞–¥–∏–∏ —É–ª—É—á—à–µ–Ω–∏—è –∑–∞—â–∏—Ç—ã"
        await event.answer(text, show_alert=True)
        return

    if event.data.startswith("upprotect_"):
        text = ("üõ°Ô∏è <b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ–∫—É–ø–∫—É —É–ª—É—á—à–µ–Ω–∏—è</b>\n"
                f"–¢–µ–∫—É—â–∏—Ö —É—Ä–æ–≤–µ–Ω—å –∑–∞—â–∏—Ç—ã: <b>{protection_level}</b>\n"
                f"–®–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–¥–±–æ—Ä–∞: <b>{now_hack_percentage}%</b>\n\n"
                f"–ë—É–¥–µ—Ç —É–ª—É—á—à–µ–Ω–æ –¥–æ: <b>{then_hack_percentage}%</b>\n"
                f"–°—Ç–æ–∏–º–æ—Å—Ç—å —É–ª—É—á—à–µ–Ω–∏—è: <b>{price} üíé</b>\n\n"
                f"üîñ <i>–®–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–¥–±–æ—Ä–∞ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ —Å —ç—Ç–∏–º —à–∞–Ω—Å–æ–º –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ "
                f"–ø–æ–¥–±–æ—Ä–∞ –ø–∞—Ä–æ–ª—è —á–µ—Ä–µ–∑ /hack —É —Ö–∞–∫–µ—Ä–∞ <u>–Ω–µ</u> –≤—Å–ø–ª—ã–≤—ë—Ç –æ—à–∏–±–∫–∞ –ø–æ–º–µ—Ö–∏.</i>")
        await event.message.edit_text(text, parse_mode=HTML,
                                      reply_markup=keyboards.up_protect_menu(user.user_id))

    elif event.data.startswith("doupprotect_"):

        if not (user.crystals >= price):
            text = "‚ùå –ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤"
            await event.answer(text, show_alert=True)
            return

        await user.upgrage_protection(price)

        text = ("üõ° <b>–ó–∞—â–∏—Ç–∞ –±–∞–Ω–∫–∞ –ø–æ–≤—ã—à–µ–Ω–∞</b>\n"
                f"–ò–∑–º–µ–Ω–∏–µ: <b>{now_hack_percentage} -> {then_hack_percentage} %</b>\n"
                f"–°–ø–∏—Å–∞–Ω–æ —Å –±–∞–ª–∞–Ω—Å–∞: <b>{price} üíé</b>")
        await event.message.edit_text(text, parse_mode=HTML)


async def back_mybank_upgrading(event: types.CallbackQuery, user: entities.User):
    bank_client_id = int(event.data.split("_")[1])

    if user.user_id != bank_client_id:
        text = "‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–æ–≤–∞–Ω–æ –Ω–µ –≤–∞–º"
        await event.answer(text, show_alert=True)
        return

    if not user.extra_percent:
        text = "‚ùå –£–ª—É—á—à–µ–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç"
        await event.answer(text, show_alert=True)
        return

    # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–≤—ã—à–µ–Ω–∏—è.
    now_percent_wo_group = await user.get_bank_percent(including_group=False)
    now_percent = await user.get_bank_percent(including_group=True)

    price = int(utils.calc_upgrade_mybank_price(now_percent_wo_group - 1) / 1.5)
    if price < 1:
        price = 1

    if event.data.startswith("backupgrade_"):
        text = ("üè¶ <b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–∫–∞—Ç —É–ª—É—á—à–µ–Ω–∏—è</b>\n"
                f"–¢–µ–∫—É—â–∏—Ö –ø—Ä–æ—Ü–µ–Ω—Ç: <b>{now_percent} %</b>\n"
                f"–ë—É–¥–µ—Ç —É–º–µ–Ω—å—à–µ–Ω –¥–æ: <b>{int(now_percent - 1)}%</b>\n"
                f"–ù–∞—á–∏—Å–ª–∏—Ç—Å—è –Ω–∞ –±–∞–ª–∞–Ω—Å: <b>{price} üíé</b>")
        await event.message.edit_text(text, parse_mode=HTML,
                                      reply_markup=keyboards.back_upgrading_mybank_menu(user.user_id))

    elif event.data.startswith("dobackupgrade_"):

        await user.deupgrade_bank(price)

        text = ("üè¶ <b>–í–∞—à –ø—Ä–æ—Ü–µ–Ω—Ç –≤ –±–∞–Ω–∫–µ –ø–æ–Ω–∏–∂–µ–Ω</b>\n"
                f"–ò–∑–º–µ–Ω–∏–µ: <b>{now_percent} -> {int(now_percent - 1)} %</b>\n"
                f"–ù–∞—á–∏—Å–ª–µ–Ω–æ –Ω–∞ –±–∞–ª–∞–Ω—Å: <b>{price} üíé</b>")
        await event.message.edit_text(text, parse_mode=HTML)


async def mybank_upgrade(event: types.CallbackQuery, user: entities.User):
    bank_client_id = int(event.data.split("_")[1])

    if user.user_id != bank_client_id:
        text = "‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–æ–≤–∞–Ω–æ –Ω–µ –≤–∞–º"
        await event.answer(text, show_alert=True)
        return

    # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–≤—ã—à–µ–Ω–∏—è.
    now_percent_wo_group = await user.get_bank_percent(including_group=False)
    now_percent = await user.get_bank_percent(including_group=True)
    price = utils.calc_upgrade_mybank_price(now_percent_wo_group)

    if event.data.startswith("upmybank_"):
        # upmybank_{user_id}

        text = ("üè¶ <b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ–∫—É–ø–∫—É —É–ª—É—á—à–µ–Ω–∏—è</b>\n"
                f"–¢–µ–∫—É—â–∏—Ö –ø—Ä–æ—Ü–µ–Ω—Ç: <b>{now_percent} %</b>\n"
                f"–ë—É–¥–µ—Ç —É–ª—É—á—à–µ–Ω–æ –¥–æ: <b>{int(now_percent + 1)}%</b>\n"
                f"–°—Ç–æ–∏–º–æ—Å—Ç—å —É–ª—É—á—à–µ–Ω–∏—è: <b>{price} üíé</b>")
        await event.message.edit_text(text, parse_mode=HTML,
                                      reply_markup=keyboards.mybank_menu(user.user_id, True))

    elif event.data.startswith("doupmybank_"):
        # doupmybank_{user_id}

        if not (user.crystals >= price):
            text = "‚ùå –ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤"
            await event.answer(text, show_alert=True)
            return

        await user.upgrade_bank(price)

        text = ("üè¶ <b>–í–∞—à –ø—Ä–æ—Ü–µ–Ω—Ç –≤ –±–∞–Ω–∫–µ –ø–æ–≤—ã—à–µ–Ω</b>\n"
                f"–ò–∑–º–µ–Ω–∏–µ: <b>{now_percent} -> {int(now_percent + 1)} %</b>\n"
                f"–°–ø–∏—Å–∞–Ω–æ —Å –±–∞–ª–∞–Ω—Å–∞: <b>{price} üíé</b>")
        await event.message.edit_text(text, parse_mode=HTML)


async def removing_user_from_group(event: types.Message | types.CallbackQuery, user: entities.User,
                                   bot_profile: aiogram.types.User):
    if isinstance(event, types.Message):
        search_text = event.text.split()[1]

        group = user.get_group()
        if not group.exists():
            text = "‚ùå –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–∞–∫–æ–π-–ª–∏–±–æ –≥—Ä—É–ø–ø–µ"
            await event.answer(text, parse_mode=HTML)
            return

        await group.update()
        if not (await group.is_leader(user.user_id)):
            text = "‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –ª–∏–¥–µ—Ä–æ–º –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã"
            await event.answer(text, parse_mode=HTML)
            return

        if utils.is_msg_code(search_text):
            text = "‚ùå –ù–µ–ª—å–∑—è –∏—Å–∫–ª—é—á–∞—Ç—å –∏–∑ –≥—Ä—É–ø–ø—ã –ø–æ –∞–Ω–æ–Ω–∏–º–Ω–æ–º—É –∫–æ–¥—É"
            await event.answer(text, parse_mode=HTML)
            return

        to_user = await search_user(user.get_storage(), event, search_text, True, bot_profile)
        if to_user:
            if to_user.user_id == user.user_id:
                text = "‚ùå –ù–µ–ª—å–∑—è –∏—Å–∫–ª—é—á–∏—Ç—å —Å–µ–±—è –∏–∑ –≥—Ä—É–ø–ø—ã"
                await event.answer(text, parse_mode=HTML)
                return

            if not (await group.is_member(to_user.user_id)):
                text = "‚ùå –í—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –≤–∞—à–µ–π –≥—Ä—É–ø–ø–µ"
                await event.answer(text, parse_mode=HTML)
                return

            text = f"<b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≥—Ä—É–ø–ø—ã</b>\n{to_user}"
            await event.answer(text, parse_mode=HTML,
                               reply_markup=keyboards.member_removing_menu(to_user.user_id, group.group_id,
                                                                           user.user_id))

    else:
        # removemember_{to_user_id}_{group_id}
        to_user_id = event.data.split("_")[1]
        call_group_id = int(event.data.split("_")[2])

        group = user.get_group()
        if not group.exists():
            text = "‚ùå –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–∞–∫–æ–π-–ª–∏–±–æ –≥—Ä—É–ø–ø–µ"
            await event.answer(text, show_alert=True)
            return

        if group.group_id != call_group_id:
            text = "‚ùå –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ"
            await event.answer(text, show_alert=True)
            return

        await group.update()
        if not (await group.is_leader(user.user_id)):
            text = "‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –ª–∏–¥–µ—Ä–æ–º —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã"
            await event.answer(text, show_alert=True)
            return

        to_user = await search_user(user.get_storage(), event, to_user_id, True, bot_profile)
        if to_user:
            # –ò—Å–∫–ª—é—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≥—Ä—É–ø–ø—ã.
            await to_user.exit_group(group.group_id)

            if not (await group.is_member(to_user.user_id)):
                text = "‚ùå –í—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –≤–∞—à–µ–π –≥—Ä—É–ø–ø–µ"
                await event.answer(text, show_alert=True)
                return

            # –û–ø–æ–≤–µ—â–∞–µ–º –ª–∏–¥–µ—Ä–∞.
            text = f"‚òëÔ∏è <b>–£—á–∞—Å—Ç–Ω–∏–∫ –∏—Å–∫–ª—é—á–µ–Ω</b>\n{to_user}"
            await event.message.edit_text(text, parse_mode=HTML)

            # –û–ø–æ–≤–µ—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
            try:
                text = (f"üò¢ <b>–í—ã –±—ã–ª–∏ –∏—Å–∫–ª—é—á–µ–Ω—ã</b>\n"
                        f"–ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã: <b>{group.get_name()}</b>")
                await event.bot.send_message(to_user.user_id, text, parse_mode=HTML)
            except:
                pass


async def removing_group(call: types.CallbackQuery, user: entities.User):
    try:
        group = user.get_group()

        assert group.exists(), "–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–∞–∫–æ–π-–ª–∏–±–æ –≥—Ä—É–ø–ø–µ"

        # removegroup_{leader_id}_{group_id}
        msg_leader_id = int(call.data.split("_")[1])
        msg_group_id = int(call.data.split("_")[2])

        assert msg_leader_id == user.user_id, "–°–æ–æ–±—â–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–æ–≤–∞–Ω–æ –Ω–µ –≤–∞–º"
        assert msg_group_id == group.group_id, "–ì—Ä—É–ø–ø–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"

        assert await group.is_leader(user.user_id), "–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –ª–∏–¥–µ—Ä–æ–º –¥–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã"

        if call.data.startswith("doremovegroup_"):
            members = await group.get_members()
            # –£–¥–∞–ª—è–µ–º –≥—Ä—É–ø–ø—É.
            await user.remove_group(group.group_id)

            text = ("üöÆ <b>–ì—Ä—É–ø–ø–∞ —É–¥–∞–ª–µ–Ω–∞</b>\n"
                    f"–ù–∞–∑–≤–∞–Ω–∏–µ: <b>{group.get_name()}</b>\n"
                    f"–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: <b>{len(members)}</b>")
            await call.message.edit_text(text, parse_mode=HTML)

        else:
            text = (f"‚ö†Ô∏è <b>–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É '{group.get_name()}'?</b>\n"
                    f"–í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –≥—Ä—É–ø–ø—ã –±—É–¥—É—Ç —Ç–∞–∫–∂–µ –∏—Å–∫–ª—é—á–µ–Ω—ã –∏–∑ –Ω–µ—ë. "
                    f"–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å.")
            await call.message.edit_text(text, parse_mode=HTML,
                                         reply_markup=keyboards.removing_group_menu(user.user_id, group.group_id))

    except Exception as e:
        await call.answer(f"‚ùå {e}", show_alert=True)


async def rename_group(event: types.Message | types.CallbackQuery, user: entities.User):
    group = user.get_group()
    if not group.exists():
        text = "‚ùå –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–∞–∫–æ–π-–ª–∏–±–æ –≥—Ä—É–ø–ø–µ"
        if isinstance(event, types.Message):
            await event.answer(text)
        else:
            await event.answer(text, show_alert=True)
        return

    if not (await group.is_leader(user.user_id)):
        text = "‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –ª–∏–¥–µ—Ä–æ–º —Å–≤–æ–µ–π –≥—Ä—É–ø–ø—ã"
        if isinstance(event, types.Message):
            await event.answer(text)
        else:
            await event.answer(text, show_alert=True)
        return

    if isinstance(event, types.Message):
        group_name = " ".join(event.text.split()[1:]).lower()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã.
        extra_symbols = " " + "–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è'"
        if not utils.is_text_cleared(group_name, extra_symbols):
            text = ("‚ùå <b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã</b>\n"
                    f"–†–∞–∑—Ä–µ—à–µ–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏–º–≤–æ–ª—ã –ª–∞—Ç–∏–Ω—Å–∫–æ–≥–æ –∏ —Ä—É—Å—Å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–æ–≤ (a-z, –∞-—è), —Ü–∏—Ñ—Ä—ã, "
                    f"–∑–Ω–∞–∫ –ø—Ä–æ–±–µ–ª–∞ –∏ –∑–Ω–∞–∫–∞ –æ–¥–∏–Ω–∞—Ä–Ω–æ–π –∫–∞–≤—ã—á–∫–∏.")
            await event.answer(text, parse_mode=HTML)
            return

        if not (3 <= len(group_name) <= 20):
            text = ("‚ùå <b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã</b>\n"
                    f"–û–Ω–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–ª–∏–Ω–Ω–µ–µ 3-—Ö –∏ –∫–æ—Ä–æ—á–µ 20-—Ç–∏ —Å–∏–º–≤–æ–ª–æ–≤.")
            await event.answer(text, parse_mode=HTML)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã.
        if await user.get_storage().group_exists_by_name(group_name):
            text = ("‚ùå <b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã</b>\n"
                    f"–ì—Ä—É–ø–ø–∞ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
            await event.answer(text, parse_mode=HTML)
            return

        text = (f"üÜï <b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã</b>\n"
                f"–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: <b>{group_name}</b>\n"
                f"–°—Ç–æ–∏–º–æ—Å—Ç—å: <b>{config.PRICE_RENAME_GROUP_CRUYSTALS} üíé</b>")
        await event.answer(text, parse_mode=HTML, reply_markup=keyboards.rename_group_menu(user.user_id, group_name))

    else:
        # renamegroup_{leader_id}_{group_name}
        leader_id = int(event.data.split("_")[1])
        group_name = event.data.split("_")[2].replace("-", " ")

        if user.user_id != leader_id:
            text = "‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–æ–≤–∞–Ω–æ –Ω–µ –≤–∞–º"
            await event.answer(text, show_alert=True)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        if not (user.crystals >= config.PRICE_RENAME_GROUP_CRUYSTALS):
            text = ("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤\n"
                    f"–°—Ç–æ–∏–º–æ—Å—Ç –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã: {config.PRICE_RENAME_GROUP_CRUYSTALS} üíé")
            await event.answer(text, show_alert=True)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã.
        if await user.get_storage().group_exists_by_name(group_name):
            text = "‚ùå –ì—Ä—É–ø–ø–∞ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
            await event.answer(text, show_alert=True)
            return

        # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –≥—Ä—É–ø–ø—É.
        await user.rename_group(group_name)
        text = ("‚ÑπÔ∏è <b>–ì—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∞</b>\n"
                f"–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: <b>{group_name}</b>\n\n"
                f"üí¨ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É:\n<code>/invite [–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å]</code>")
        await event.message.edit_text(text, parse_mode=HTML)


async def show_user_group(event: types.Message | types.CallbackQuery, user: entities.User):
    group = user.get_group()
    if not group.exists():
        text = "‚ÑπÔ∏è –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–∞–∫–æ–π-–ª–∏–±–æ –≥—Ä—É–ø–ø–µ"
        if isinstance(event, types.Message):
            await event.answer(text)
        else:
            await event.answer(text, show_alert=True)
        return

    if isinstance(event, types.Message):
        await group.update()

        members = await group.get_members()
        leader = await group.get_leader()
        post = group.get_user_post(user.user_id)
        tax = await group.get_tax()

        max_members_count = await group.get_max_members_count()
        level = await group.get_level()

        text = (f"üë• <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–ø–ø–µ</b>\n"
                f"–ù–∞–∑–≤–∞–Ω–∏–µ: <b>{group.get_name()}</b>\n"
                f"–£—Ä–æ–≤–µ–Ω—å: <b>{level}</b>\n"
                f"–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: <b>{len(members)} –∏–∑ {max_members_count}</b>\n"
                f"–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≤–∑–Ω–æ—Å: <b>{tax} ü™ô</b>\n"
                f"–ë–æ–Ω—É—Å –∫ –±–∞–Ω–∫—É: <b>+{group.level}%</b>\n"
                f"–í–∞—à —Å—Ç–∞—Ç—É—Å: <b>{post}</b>\n\n"
                f"<u>–õ–∏–¥–µ—Ä –≥—Ä—É–ø–ø—ã</u>\n{leader}")

        if await group.is_leader(user.user_id):
            rpl = keyboards.leader_group_menu(user.user_id, group.group_id, False)
        else:
            rpl = keyboards.user_group_menu(user.user_id, group.group_id, False)

        await event.reply(text, parse_mode=HTML, reply_markup=rpl)

    else:
        msg_member_id = int(event.data.split("_")[1])
        msg_group_id = int(event.data.split("_")[2])

        if user.user_id != msg_member_id:
            text = "‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–æ–≤–∞–Ω–æ –Ω–µ –≤–∞–º"
            await event.answer(text, show_alert=True)
            return

        if group.group_id != msg_group_id:
            text = "‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
            await event.answer(text, show_alert=True)
            return

        await group.update()

        # exitgroup_{user_id}_{group_id}
        if event.data.startswith("exitgroup_"):
            text = (f"‚ö†Ô∏è <b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ</b>\n"
                    f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–∫–∏–Ω—É—Ç—å –≥—Ä—É–ø–ø—É <b>{group.get_name()}</b>?")
            await event.message.edit_text(text, parse_mode=HTML,
                                          reply_markup=keyboards.user_group_menu(user.user_id, group.group_id, True))

        elif event.data.startswith("doexitgroup_"):
            # doexitgroup_{user_id}_{group_id}

            # –£–±–∏—Ä–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –≥—Ä—É–ø–ø—ã.
            await user.exit_group(group.group_id)

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
            text = ("‚òëÔ∏è <b>–í—ã –ø–æ–∫–∏–Ω—É–ª–∏ –≥—Ä—É–ø–ø—É</b>\n"
                    f"–ù–∞–∑–≤–∞–Ω–∏–µ: <b>{group.get_name()}</b>")
            await event.message.edit_text(text, parse_mode=HTML)

            leader = await group.get_leader()
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ª–∏–¥–µ—Ä–∞ –≥—Ä—É–ø–ø—ã.
            text = f"üö™ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–∫–∏–Ω—É–ª –≥—Ä—É–ø–ø—É</b>\n{user}"
            try:
                await event.bot.send_message(leader.user_id, text, parse_mode=HTML)
            except:
                pass

        elif event.data.startswith("upgroup_"):
            if group.level == 5:
                await event.answer("‚ÑπÔ∏è –£ –≤–∞—Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –≥—Ä—É–ø–ø—ã", show_alert=True)
                return

            price = config.PRICE_GROUP_UPGRADE[int(group.level + 1)]
            price_coins = price["coins"]
            price_crystals = price["crystals"]

            text = (f"üÜô <b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ</b>\n"
                    f"–ü–æ–≤—ã—à–µ–Ω–∏–µ –¥–æ —É—Ä–æ–≤–Ω—è: <b>{int(group.level + 1)}</b>\n"
                    f"–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–≤—ã—à–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã: <b>{price_coins} ü™ô –∏ {price_crystals} üíé</b>")
            await event.message.edit_text(text, parse_mode=HTML,
                                          reply_markup=keyboards.leader_group_menu(user.user_id, group.group_id, True))

        elif event.data.startswith("doupgroup_"):
            if not (await group.is_leader(user.user_id)):
                text = "‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –ª–∏–¥–µ—Ä–æ–º –≥—Ä—É–ø–ø—ã"
                await event.answer(text, show_alert=True)
                return

            if group.level == 5:
                await event.answer("‚ÑπÔ∏è –£ –≤–∞—Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –≥—Ä—É–ø–ø—ã", show_alert=True)
                return

            price = config.PRICE_GROUP_UPGRADE[int(group.level + 1)]
            price_coins = price["coins"]
            price_crystals = price["crystals"]

            if not (user.balance >= price_coins and user.crystals >= price_crystals):
                text = "‚ùå –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ"
                await event.answer(text, show_alert=True)
                return

            # –ü–æ–≤—ã—à–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –≥—Ä—É–ø–ø—ã.
            new_level = await group.upgrade()
            new_max_members_count = config.MAX_GROUP_MEMBERS[new_level]
            members = await group.get_members()

            text = (f"üéâ <b>–£—Ä–æ–≤–µ–Ω—å –≥—Ä—É–ø–ø—ã –ø–æ–≤—ã—à–µ–Ω</b>\n"
                    f"–ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å: <b>{new_level}</b>\n"
                    f"–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: <b>{len(members)} –∏–∑ {new_max_members_count}</b>")
            await event.message.edit_text(text, parse_mode=HTML)


async def show_group_inviting(event: types.Message | types.CallbackQuery, user: entities.User,
                              bot_profile: aiogram.types.User | None):
    if isinstance(event, types.Message):
        if bot_profile is None:
            raise

        group = user.get_group()
        if not (await group.is_leader(user.user_id)):
            text = "‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –ª–∏–¥–µ—Ä–æ–º –∫–∞–∫–æ–π-–ª–∏–±–æ –≥—Ä—É–ø–ø—ã"
            await event.answer(text, parse_mode=HTML)
            return

        if not (await group.can_join()):
            text = ("‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –∏–ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ "
                    "—É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è –≥—Ä—É–ø–ø—ã")
            await event.answer(text, parse_mode=HTML)
            return

        if event.reply_to_message:
            search_text = event.reply_to_message.from_user.id
        else:
            search_text = event.text.split()[1]

        if utils.is_msg_code(search_text):
            text = "‚ùå –ù–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –ø–æ –∞–Ω–æ–Ω–∏–º–Ω–æ–º—É –∫–æ–¥—É"
            await event.answer(text, parse_mode=HTML)
            return

        to_user = await search_user(user.get_storage(), event, search_text, True, bot_profile)

        if to_user:
            if user.user_id == to_user.user_id:
                text = "‚ùå –ù–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —Å–∞–º–æ–º—É —Å–µ–±–µ"
                await event.answer(text, parse_mode=HTML)
                return

            if to_user.get_group().exists():
                text = "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –≥—Ä—É–ø–ø–µ"
                await event.answer(text, parse_mode=HTML)
                return

            cd_key = f"inviteToUserId{to_user.user_id}"
            if not user.cooldown(cd_key, config.COOLDOWN_INVITE_SAME):
                last_time = user.get_cooldown_last_time(cd_key)
                time_left = utils.calc_seconds_left(last_time, config.COOLDOWN_INVITE_SAME)

                text = ("‚ùå <b>–í—ã –Ω–µ–¥–∞–≤–Ω–æ –ø—Ä–∏–≥–ª–∞—à–∞–ª–∏ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n"
                        f"–ü–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â–µ {utils.format_time(time_left)}")
                await event.answer(text, parse_mode=HTML)
                return

            leader = await group.get_leader()
            tax = await group.get_tax()
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ.
            text = (f"üíå <b>–í–∞—Å –ø—Ä–∏–≥–ª–∞—à–∞—é—Ç –≤ –≥—Ä—É–ø–ø—É</b>\n"
                    f"–ù–∞–∑–≤–∞–Ω–∏–µ: <b>{group.get_name()}</b>\n"
                    f"–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: <b>{len(await group.get_members())}</b>\n\n"
                    f"<u>–õ–∏–¥–µ—Ä –≥—Ä—É–ø–ø—ã</u>\n{leader}\n\n"
                    f"<u>–°—Ç–æ–∏–º–æ—Å—Ç—å</u>\n"
                    f"–í—Å—Ç—É–ø–ª–µ–Ω–∏–µ: <b>{config.PRICE_JOIN_GROUP} ü™ô</b>\n"
                    f"–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≤–∑–Ω–æ—Å: <b>{tax} ü™ô</b>")
            try:
                await event.bot.send_message(to_user.user_id, text, parse_mode=HTML,
                                             reply_markup=keyboards.invite_group_menu(to_user.user_id, group.group_id))
            except:
                pass

            text = f"üì® <b>–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ</b>\n{to_user}"
            await event.answer(text, parse_mode=HTML)
    else:
        # joingroup_{to_user_id}_{group_id}
        future_member_id = int(event.data.split("_")[1])
        group_id = int(event.data.split("_")[2])

        if user.user_id != future_member_id:
            text = "‚ùå –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–µ –≤–∞–º"
            await event.answer(text, show_alert=True)
            return

        if user.get_group().exists():
            text = "‚ùå –í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –≥—Ä—É–ø–ø–µ"
            await event.answer(text, show_alert=True)
            return

        if not (user.balance >= config.PRICE_JOIN_GROUP):
            text = "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ"
            await event.answer(text, show_alert=True)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã.
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –≥—Ä—É–ø–ø–µ.
        future_group = entities.Group(user.get_storage(), group_id)
        if not (await future_group.can_join()):
            text = ("‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –∏–ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ "
                    "—É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è –≥—Ä—É–ø–ø—ã")
            await event.answer(text, show_alert=True)
            return

        # –ü–æ–ª—É—á–∞–µ–º –ª–∏–¥–µ—Ä–∞ –≥—Ä—É–ø–ø—ã.
        leader = await future_group.get_leader()
        members = await future_group.get_members()
        max_members_count = await future_group.get_max_members_count()

        # –í—Å—Ç—É–ø–∞–µ–º –≤ –≥—Ä—É–ø–ø—É.
        await user.join_group(group_id)
        tax = await future_group.get_tax()

        text = (f"üÜï <b>–í—ã —Å—Ç–∞–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –≥—Ä—É–ø–ø—ã</b>\n"
                f"–ù–∞–∑–≤–∞–Ω–∏–µ: <b>{future_group.get_name()}</b>\n"
                f"–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: <b>{int(len(members) + 1)}</b>\n"
                f"–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≤–∑–Ω–æ—Å: <b>{tax} ü™ô</b>\n\n"
                f"<u>–õ–∏–¥–µ—Ä –≥—Ä—É–ø–ø—ã</u>\n{leader}")
        await event.message.edit_text(text, parse_mode=HTML)

        # –û–ø–æ–≤–µ—â–∞–µ–º –ª–∏–¥–µ—Ä–∞ –≥—Ä—É–ø–ø—ã.
        text = (f"üÜï <b>–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ</b>\n{user}\n\n"
                f"–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: <b>{int(len(members) + 1)} –∏–∑ {max_members_count}</b>")
        try:
            await event.bot.send_message(leader.user_id, text, parse_mode=HTML)
        except:
            pass


async def show_group_creating(event: types.Message | types.CallbackQuery, user: entities.User):
    if isinstance(event, types.Message):  # –ù–æ–≤–∞—è –æ—á–µ–Ω—å –∫—Ä—É—Ç–∞—è –≥—Ä—É–ø–ø–∞ 1234567
        group_name = " ".join(event.text.split()[1:]).lower()

        if user.get_group().exists():
            text = "‚ùå –í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –≥—Ä—É–ø–ø–µ"
            await event.answer(text, parse_mode=HTML)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã.
        extra_symbols = " " + "–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è'"
        if not utils.is_text_cleared(group_name, extra_symbols):
            text = ("‚ùå <b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã</b>\n"
                    f"–†–∞–∑—Ä–µ—à–µ–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏–º–≤–æ–ª—ã –ª–∞—Ç–∏–Ω—Å–∫–æ–≥–æ –∏ —Ä—É—Å—Å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–æ–≤ (a-z, –∞-—è), —Ü–∏—Ñ—Ä—ã, "
                    f"–∑–Ω–∞–∫ –ø—Ä–æ–±–µ–ª–∞ –∏ –∑–Ω–∞–∫–∞ –æ–¥–∏–Ω–∞—Ä–Ω–æ–π –∫–∞–≤—ã—á–∫–∏.")
            await event.answer(text, parse_mode=HTML)
            return

        if not (3 <= len(group_name) <= 20):
            text = ("‚ùå <b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã</b>\n"
                    f"–û–Ω–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–ª–∏–Ω–Ω–µ–µ 3-—Ö –∏ –∫–æ—Ä–æ—á–µ 20-—Ç–∏ —Å–∏–º–≤–æ–ª–æ–≤.")
            await event.answer(text, parse_mode=HTML)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã.
        if await user.get_storage().group_exists_by_name(group_name):
            text = ("‚ùå <b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã</b>\n"
                    f"–ì—Ä—É–ø–ø–∞ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
            await event.answer(text, parse_mode=HTML)
            return

        text = (f"üÜï <b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã</b>\n"
                f"–ù–∞–∑–≤–∞–Ω–∏–µ: <b>{group_name}</b>\n"
                f"–°—Ç–æ–∏–º–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è: <b>{config.PRICE_CREATE_GROUP} ü™ô –∏ {config.PRICE_CREATE_GROUP_CRYSTALS} üíé</b>")
        await event.answer(text, parse_mode=HTML, reply_markup=keyboards.create_group_menu(user.user_id, group_name))

    else:
        # newgroup_{leader_id}_{group_name}
        leader_id = int(event.data.split("_")[1])
        group_name = event.data.split("_")[2].replace("-", " ")

        if user.user_id != leader_id:
            text = "‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–æ–≤–∞–Ω–æ –Ω–µ –≤–∞–º"
            await event.answer(text, show_alert=True)
            return

        if user.get_group().exists():
            text = "‚ùå –í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –≥—Ä—É–ø–ø–µ"
            await event.answer(text, show_alert=True)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        if not (user.balance >= config.PRICE_CREATE_GROUP and user.crystals >= config.PRICE_CREATE_GROUP_CRYSTALS):
            text = ("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤\n"
                    f"–°—Ç–æ–∏–º–æ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã: {config.PRICE_CREATE_GROUP} ü™ô –∏ {config.PRICE_CREATE_GROUP_CRYSTALS} üíé")
            await event.answer(text, show_alert=True)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã.
        if await user.get_storage().group_exists_by_name(group_name):
            text = "‚ùå –ì—Ä—É–ø–ø–∞ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
            await event.answer(text, show_alert=True)
            return

        # –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—É.
        await user.create_group(group_name)
        text = ("‚ÑπÔ∏è <b>–ì—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞</b>\n"
                f"–ù–∞–∑–≤–∞–Ω–∏–µ: <b>{group_name}</b>\n\n"
                f"üí¨ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É:\n<code>/invite [–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å]</code>")
        await event.message.edit_text(text, parse_mode=HTML)


async def show_casino(event: types.Message | types.CallbackQuery, user: entities.User):
    if isinstance(event, types.Message):
        # –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç.
        try:
            bet_amount = int(event.text.split()[1])
        except:
            text = "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—É–º–º–∞ —Å—Ç–∞–≤–∫–∏"
            await event.answer(text, parse_mode=HTML)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        if user.balance < 2:
            text = ("‚ùå <b>–°–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∏–π –±–∞–ª–∞–Ω—Å</b>\n"
                    f"–í–∞—à –±–∞–ª–∞–Ω—Å –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–∞–≤–ª—è—Ç—å —Ö–æ—Ç—è –±—ã 2 –º–æ–Ω–µ—Ç–∫–∏")
            await event.answer(text, parse_mode=HTML)
            return

        min_casino_bet = int(user.balance * 0.1)
        if min_casino_bet < 1000:
            min_casino_bet = 1000

        if event.chat.id != user.user_id and bet_amount < min_casino_bet:
            min_casino_bet_shown = utils.format_balance(min_casino_bet)
            text = ("‚ùå –ü—É–±–ª–∏—á–Ω–æ –º–æ–∂–Ω–æ –∏–≥—Ä–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞ —Å—É–º–º—ã "
                    "<b>–Ω–µ –º–µ–Ω—å—à–µ —á–µ–º 10% –æ—Ç –±–∞–ª–∞–Ω—Å–∞ –∏ –Ω–µ –º–µ–Ω—å—à–µ 1000 ü™ô</b>\n\n"
                    f"–ú–∏–Ω. –ø—É–±–ª–∏—á–Ω–∞—è —Å—Ç–∞–≤–∫–∞: <b>{min_casino_bet_shown}</b> ü™ô")
            await event.answer(text, parse_mode=HTML,
                               reply_markup=keyboards.cancel_menu(user.user_id))
            return

        if 2 <= bet_amount <= user.balance:
            text = ("üé∞ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–∞–∑–∏–Ω–æ</b>\n"
                    f"–ò–≥—Ä–æ–∫: <code>{user.user_id}</code> ({user.get_username()})\n"
                    f"–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞: <b>{utils.format_balance(bet_amount)} ü™ô</b>\n\n"
                    "üïπÔ∏è <b>–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –∏–≥—Ä—ã</b>\n"
                    f"[–†–µ–∂–∏–º x{config.GAME_VERY_LOW_MULTIPLIER}] –í—ã–∏–≥—Ä—ã—à: <b>{utils.format_balance(int(config.GAME_VERY_LOW_MULTIPLIER * bet_amount))} ü™ô</b> –®–∞–Ω—Å: <b>{config.GAME_VERY_LOW_PERCENTAGE}%</b>\n"
                    f"[–†–µ–∂–∏–º x{config.GAME_LOW_MULTIPLIER}] –í—ã–∏–≥—Ä—ã—à: <b>{utils.format_balance(int(config.GAME_LOW_MULTIPLIER * bet_amount))} ü™ô</b> –®–∞–Ω—Å: <b>{config.GAME_LOW_PERCENTAGE}%</b>\n"
                    f"[–†–µ–∂–∏–º x{config.GAME_MIDDLE_MULTIPLIER}] –í—ã–∏–≥—Ä—ã—à: <b>{utils.format_balance(int(config.GAME_MIDDLE_MULTIPLIER * bet_amount))} ü™ô</b> –®–∞–Ω—Å: <b>{config.GAME_MIDDLE_PERCENTAGE}%</b>\n"
                    f"[–†–µ–∂–∏–º x{config.GAME_HIGH_MULTIPLIER}] –í—ã–∏–≥—Ä—ã—à: <b>{utils.format_balance(int(config.GAME_HIGH_MULTIPLIER * bet_amount))} ü™ô</b> –®–∞–Ω—Å: <b>{config.GAME_HIGH_PERCENTAGE}%</b>\n"
                    f"[–†–µ–∂–∏–º x{config.GAME_VERY_HIGH_MULTIPLIER}] –í—ã–∏–≥—Ä—ã—à: <b>{utils.format_balance(int(config.GAME_VERY_HIGH_MULTIPLIER * bet_amount))} ü™ô</b> –®–∞–Ω—Å: <b>{config.GAME_VERY_HIGH_PERCENTAGE}%</b>\n")
            rpl = keyboards.casino_menu(user.user_id, bet_amount)
            await event.reply(text, parse_mode=HTML, reply_markup=rpl)

        else:
            text = ("‚ùå <b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—É–º–º–∞ —Å—Ç–∞–≤–∫–∏</b>\n"
                    f"–£–∫–∞–∂–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç 2 –¥–æ {utils.format_balance(user.balance)} –º–æ–Ω–µ—Ç–æ–∫")
            await event.answer(text, parse_mode=HTML)

    elif isinstance(event, types.CallbackQuery):
        # "game_low_{game_code}_{user_id}_{bet_amount}"
        game_mode, game_code, user_id, bet_amount = event.data.split("_")[1:]
        player_id = int(user_id)
        try:
            bet_amount = int(bet_amount)
        except:
            text = "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—É–º–º–∞ —Å—Ç–∞–≤–∫–∏"
            await event.answer(text, show_alert=True)
            return

        if user.user_id != player_id:
            text = "‚ùå –ò–≥—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞ –¥—Ä—É–≥–∏–º –∏–≥—Ä–æ–∫–æ–º"
            await event.answer(text, show_alert=True)
            return

        if user.value("lastGameCode") == game_code:
            text = "‚ùå –ò–≥—Ä–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
            await event.answer(text, show_alert=True)
            return

        if user.balance < bet_amount:
            text = "‚ùå –£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –º–æ–Ω–µ—Ç–æ–∫ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ"
            await event.answer(text, show_alert=True)
            return

        # –°–ø–∏—Å—ã–≤–∞–µ–º –¥–µ–Ω—å–≥–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        await user.pay(bet_amount)

        # –ü—Ä–æ–≤–æ–¥–∏–º –∏–≥—Ä—É.
        profit = utils.calc_casino_profit(game_mode, bet_amount)
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∏–≥—Ä—É.
        await user.play_game(bet_amount, profit)

        if profit:
            await user.earn(profit)
            result = "–í—ã–∏–≥—Ä—ã—à"
        else:
            result = "–ü—Ä–æ–∏–≥—Ä—ã—à"

        levels = {
            "verylow": (f"–†–µ–∂–∏–º x{config.GAME_VERY_LOW_MULTIPLIER}", config.GAME_VERY_LOW_PERCENTAGE),
            "low": (f"–†–µ–∂–∏–º x{config.GAME_LOW_MULTIPLIER}", config.GAME_LOW_PERCENTAGE),
            "middle": (f"–†–µ–∂–∏–º x{config.GAME_MIDDLE_MULTIPLIER}", config.GAME_MIDDLE_PERCENTAGE),
            "high": (f"–†–µ–∂–∏–º x{config.GAME_HIGH_MULTIPLIER}", config.GAME_HIGH_PERCENTAGE),
            "veryhigh": (f"–†–µ–∂–∏–º x{config.GAME_VERY_HIGH_MULTIPLIER}", config.GAME_VERY_HIGH_PERCENTAGE)
        }

        await event.message.edit_reply_markup()
        text = ("üé∞ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω–æ–π –∏–≥—Ä—ã</b>\n"
                f"–ò–≥—Ä–æ–∫: {user.user_id} ({user.get_username()})\n"
                f"–°—Ç–∞–≤–∫–∞: <b>{utils.format_balance(bet_amount)} ü™ô</b>\n\n"
                f"–£—Ä–æ–≤–µ–Ω—å –∏–≥—Ä—ã: <u>{levels[game_mode][0]}</u>\n"
                f"–®–∞–Ω—Å: <b>{levels[game_mode][1]}%</b>\n"
                f"–†–µ–∑—É–ª—å—Ç–∞—Ç: <b>{result}</b>\n"
                f"–ü–æ–ª—É—á–µ–Ω–æ: <b>{utils.format_balance(profit)} ü™ô</b>")
        await event.message.edit_text(text, parse_mode=HTML)


async def clear_from_disagreed_users(bot: aiogram.Bot, storage: db.Storage):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç –ø—Ä–∞–≤–∏–ª–∞ —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ.
        users = await storage.get_disagreed_users()

        if config.DEBUG_MODE:
            print(f"disagreed users: {users}")

        for user_id in users:
            # –ï—Å–ª–∏ –Ω–µ –∞–¥–º–∏–Ω.
            if not (user_id in config.ADMINS):
                await asyncio.sleep(3)
                # –ë–ª–æ–∫–∏—Ä—É–µ–º.
                user = entities.User(storage, user_id)
                await user.load_from_db()
                await user.ban()
                try:
                    await bot.ban_chat_member(config.CHAT_ID, user_id)
                except:
                    pass

                # –£–≤–µ–¥–æ–º–ª—è–µ–º.
                text = (f"‚õîÔ∏è <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—Å–∫–ª—é—á–µ–Ω</b>\n{user}\n–ë–∞–ª–∞–Ω—Å: <b>{utils.format_balance(user.balance)} ü™ô</b>\n\n"
                        f"–ü—Ä–∏—á–∏–Ω–∞: –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —Å–æ–≥–ª–∞—Å–∏–µ —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –≥—Ä—É–ø–ø—ã –≤ —Ç–µ—á–µ–Ω–∏–µ {utils.format_time(config.TIME_TO_AGREED)}.")
                await bot.send_message(config.CHAT_ID, text, parse_mode=HTML)

                await asyncio.sleep(3)

                try:
                    text = ("‚õîÔ∏è –í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã, —Ç–∞–∫ –∫–∞–∫ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ —Å–æ–≥–ª–∞—Å–∏–µ "
                            f"—Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –≥—Ä—É–ø–ø—ã –≤ —Ç–µ—á–µ–Ω–∏–µ {utils.format_time(config.TIME_TO_AGREED)}")
                    await bot.send_message(user_id, text, parse_mode=HTML)

                except:
                    pass

                if not config.DEBUG_MODE:
                    notif_text = (f"‚õîÔ∏è <b>–ë–∞–Ω –∑–∞ –±–µ–∑–¥–µ–π—Å—Ç–≤–∏–µ</b>\n{user}\n"
                                  f"–ë–∞–ª–∞–Ω—Å: <b>{utils.format_balance(user.balance)} ü™ô</b>")
                    await notify(bot, notif_text)
    except Exception as e:
        print(f"CLR DA: {e}")


async def clear_from_inactive_users(bot: aiogram.Bot, storage: db.Storage):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
        users = await storage.get_inactive_users()

        if config.DEBUG_MODE:
            print(f"inactive users: {users}")

        for user_id in users:
            # –ï—Å–ª–∏ –Ω–µ –∞–¥–º–∏–Ω.
            if not (user_id in config.ADMINS):
                await asyncio.sleep(0.04)
                # –ë–ª–æ–∫–∏—Ä—É–µ–º.
                user = entities.User(storage, user_id)
                await user.load_from_db()
                await user.ban()
                try:
                    await bot.ban_chat_member(config.CHAT_ID, user_id)
                except:
                    pass

                await asyncio.sleep(3)
                # –£–≤–µ–¥–æ–º–ª—è–µ–º.
                text = (f"‚õîÔ∏è <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—Å–∫–ª—é—á–µ–Ω</b>\n{user}\n–ë–∞–ª–∞–Ω—Å: <b>{utils.format_balance(user.balance)} ü™ô</b>\n\n"
                        f"–ü—Ä–∏—á–∏–Ω–∞: –±–µ–∑–¥–µ–π—Å—Ç–≤–∏–µ –≤ —Ç–µ—á–µ–Ω–∏–µ {utils.format_time(config.TIME_USER_MAX_INACTIVE)}.")
                await bot.send_message(config.CHAT_ID, text, parse_mode=HTML)

                await asyncio.sleep(3)
                try:
                    text = (f"‚õîÔ∏è –í—ã –±—ã–ª–∏ –∏—Å–∫–ª—é—á–µ–Ω—ã –∏–∑ —á–∞—Ç–∞, "
                            f"—Ç–∞–∫ –∫–∞–∫ –±–µ–∑–¥–µ–π—Å—Ç–≤–æ–≤–∞–ª–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ {utils.format_time(config.TIME_USER_MAX_INACTIVE)}.")
                    await bot.send_message(user_id, text, parse_mode=HTML)
                except:
                    pass

    except Exception as e:
        print(f"CLR E: {e}")


async def help_menu(message: types.Message):
    command = config.REF_MAIN_MANUAL
    text = (f"‚ÑπÔ∏è <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —á–∞—Ç—É: {command}</b>\n\n"
            f"/profile - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å\n"
            f"/coins - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–ª—å–∫–æ –±–∞–ª–∞–Ω—Å—ã\n"
            f"/top - –¢–æ–ø –±–æ–≥–∞—Ç—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
            f"/worst - –°–∞–º—ã–µ –±–µ–¥–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏\n"
            f"/mybank - –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–≤–æ–∏—Ö –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö —Å—á–µ—Ç–æ–≤\n"
            f"/topbanks - –¢–æ–ø –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö —Å—á–µ—Ç–æ–≤\n"
            f"/fees - –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–µ–∫—É—â–∏—Ö –∫–æ–º–∏—Å—Å–∏–∏ –∏ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–π.")
    await message.answer(text, parse_mode=HTML, disable_web_page_preview=True)


async def process_vote(call: types.CallbackQuery, user: entities.User):
    stage, decision, poll_id = call.data.replace("poll_", "").split("_")
    stage, poll_id = int(stage), int(poll_id)

    if not (stage in (1, 2)):
        text_error = "‚ùå –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
        await call.answer(text_error, show_alert=True)
        return

    if user.is_muted():
        text_error = "‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏–Ω–∏–º–∞—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ –æ–ø—Ä–æ—Å–µ (–º—É—Ç)"
        await call.answer(text_error, show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏.
    poll = await user.get_storage().get_poll(poll_id, stage)

    # –ù–µ–ª—å–∑—è –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å, –µ—Å–ª–∏ —Ç—ã –æ–±–≤–∏–Ω—è–µ–º—ã–π.
    if user.user_id == poll["to_id"]:
        text_error = "‚ùå –û–±–≤–∏–Ω—è–µ–º—ã–µ –Ω–µ –º–æ–≥—É—Ç —É—á–∞–≤—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —ç—Ç–æ–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏"
        await call.answer(text_error, show_alert=True)
        return

    # –í—ã—à–ª–æ –ª–∏ –≤—Ä–µ–º—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è.
    poll_created_time = poll["created"]
    poll_created_time: datetime.datetime
    now_time = datetime.datetime.now()
    if now_time.timestamp() - poll_created_time.timestamp() > config.TIME_TO_POLL:
        text_error = "‚ùå –í—Ä–µ–º—è –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ"
        await call.answer(text_error, show_alert=True)
        return

    # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –≥–æ–ª–æ—Å, –µ—Å–ª–∏ –æ–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.
    user_vote = await user.get_vote(poll_id, stage)
    if user_vote:
        text_error = "‚ùå –í—ã —É–∂–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª–∏"
        await call.answer(text_error, show_alert=True)

    else:
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≥–æ–ª–æ—Å –≤ –ë–î.
        await user.vote(poll_id, stage, decision)

        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤ dict[decision:total_decision_balance].
        poll_votes = await user.get_storage().get_poll_votes(poll_id, stage)
        votes_balance_distribution = poll_votes["balances"]
        votes_count_distribution = poll_votes["count"]
        if not votes_balance_distribution or not votes_count_distribution:
            raise

        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.
        rpl = keyboards.poll_menu(poll_id, votes_balance_distribution, votes_count_distribution)

        try:
            # –ò–∑–º–µ–Ω—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.
            await call.message.edit_reply_markup(rpl)
        except:
            pass

        # –ü–æ–ª—É—á–∞–µ–º –æ–±–≤–∏–Ω—è–µ–º–æ–≥–æ.
        to_user = entities.User(user.get_storage(), user_id=poll["to_id"])
        await to_user.load_from_db()

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ —É—Å–ª–æ–≤–∏—è.
        # –ß–∏—Å–ª–æ –≥–æ–ª–æ—Å–æ–≤.
        votes_count = utils.calc_votes_total(votes_count_distribution)
        # votes_count = len(votes_balance_distribution)
        # –ò—Ö –æ–±—â–∏–π "–±–∞–ª–∞–Ω—Å".
        votes_sum = utils.calc_votes_total(votes_balance_distribution)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç—Ä–µ–±—É–µ–º—ã–µ —É—Å–ª–æ–≤–∏—è.
        # –¢—Ä–µ–±—É–µ–º—ã–π –æ–±—â–∏–π "–±–∞–ª–∞–Ω—Å" –≥–æ–ª–æ—Å–æ–≤.
        need_votes_sum = int(to_user.balance * config.VOTES_BALANCE_MULTIPLIER)
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤.
        users_count = await user.get_storage().get_users_count()
        min_votes_count = utils.calc_part_of(users_count, config.MIN_VOTES_PERCENT, config.MIN_VOTES_COUNT)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç–∞–¥–∏–∏.
        if votes_count >= min_votes_count and votes_sum >= need_votes_sum:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–±–µ–¥–∏–ª –Ω–∞ 1 —Å—Ç–∞–¥–∏–∏.
            win_decision = utils.get_win_vote(votes_balance_distribution)
            win_decision_percent = int(votes_balance_distribution[win_decision] / votes_sum * 100)

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞.
            if win_decision == "fine":
                # –®—Ç—Ä–∞—Ñ. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –±–∞–ª–∞–Ω—Å–∞.
                fine_percent = utils.choose_win_decision_two(win_decision)
                fine_amount = int(to_user.balance * fine_percent / 100)

                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –≤ –ë–î.
                await user.get_storage().finish_poll(poll_id, win_decision_1=win_decision,
                                                     win_decision_2=str(fine_amount))

                win_decision_name = f"–ò–∑—ä—è—Ç—å {utils.format_balance(fine_amount)} ü™ô"
                text_result = ("‚òëÔ∏è <b>–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ</b>\n"
                               f"{to_user}\n\n"
                               f"–í—ã–±—Ä–∞–Ω–æ: <b>{win_decision_name}</b>\n"
                               f"–ì–æ–ª–æ—Å–æ–≤: <b>{win_decision_percent}%</b>\n\n–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º: @reireireime")
                await call.message.answer(text_result, parse_mode=HTML)

                # –ü–µ—Ä–µ–≤–æ–¥–∏–º –º–æ–Ω–µ—Ç–∫–∏.
                await to_user.fine(fine_amount)

                # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–±–≤–∏–Ω—è–µ–º–æ–≥–æ.
                text_accused = (f"üö® –ù–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ —Ä–µ—à–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è —É –≤–∞—Å –∏–∑—ä—è–ª–∏ "
                                f"<b>{utils.format_balance(fine_amount)} ü™ô</b>")
                try:
                    await call.message.bot.send_message(to_user.user_id, text_accused, parse_mode=HTML)
                except:
                    pass

                # –í–∑–∏–º–∞–µ–º —Å–æ —à—Ç—Ä–∞—Ñ–∞ –∫–æ–º–∏—Å—Å–∏—é –ø–µ—Ä–µ–¥ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º.
                fine_amount = int(fine_amount - int((fine_amount * config.SHARE_TO_USERS_FEE_PERCENT / 100)))
                if fine_amount < 0:
                    fine_amount = 0

                if fine_amount:
                    #  –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –º–æ–Ω–µ—Ç–∫–∏ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.
                    tranfer_result = await user.get_storage().transfer_to_users_percent(config.SHARE_TO_USERS_PERCENT,
                                                                                        fine_amount)
                    if tranfer_result:
                        text_transfer_result = ("üí∏ <b>–ò–∑—ä—è—Ç—ã–µ –º–æ–Ω–µ—Ç–∫–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã</b>\n"
                                                f"–ü–µ—Ä–µ–≤–µ–¥–µ–Ω–æ: <b>{len(tranfer_result['users'])} —É—á–∞—Å—Ç–Ω–∏–∫–∞–º</b>\n"
                                                f"–ö–∞–∂–¥–æ–º—É –ø–æ: <b>{utils.format_balance(tranfer_result['amount_per_user'])} ü™ô</b>")
                        await call.message.answer(text_transfer_result, parse_mode=HTML)

                        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
                        for one_user in tranfer_result['users']:
                            try:
                                one_user_id = one_user["user_id"]
                                text = ("üíµ <b>–í—Ö–æ–¥—è—â–∏–π –ø–µ—Ä–µ–≤–æ–¥</b>\n"
                                        f"–í—ã –ø–æ–ª—É—á–∏–ª–∏ <b>{utils.format_balance(tranfer_result['amount_per_user'])} ü™ô</b> –∏–∑ –æ–±—â–µ–π —Å—É–º–º—ã –∏–∑—ä—è—Ç—ã—Ö.")
                                await call.message.bot.send_message(one_user_id, text, parse_mode=HTML)
                                await asyncio.sleep(0.04)
                            except:
                                pass

                    else:
                        text_transfer_result = ("‚ôªÔ∏è –ë—ã–ª–æ –∏–∑—ä—è—Ç–æ —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ –º–æ–Ω–µ—Ç–æ–∫. –ù–∏–∫—Ç–æ –∏–∑ —É—á–∞—Å—Ç–∏–∫–æ–≤ –Ω–µ –ø–æ–ª—É—á–∏—Ç "
                                                "–ø–µ—Ä–µ–≤–æ–¥.")
                        await call.message.answer(text_transfer_result)
                else:
                    text_transfer_result = ("‚ôªÔ∏è –ë—ã–ª–æ –∏–∑—ä—è—Ç–æ —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ –º–æ–Ω–µ—Ç–æ–∫. –ù–∏–∫—Ç–æ –∏–∑ —É—á–∞—Å—Ç–∏–∫–æ–≤ –Ω–µ –ø–æ–ª—É—á–∏—Ç "
                                            "–ø–µ—Ä–µ–≤–æ–¥.")
                    await call.message.answer(text_transfer_result)

            elif win_decision == "mute":
                # –ú—É—Ç. –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ä–æ–∫ –º—É—Ç–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–¥–æ –∫–∞–∫–æ–≥–æ timestamp).
                till_date = utils.choose_win_decision_two(win_decision)
                await to_user.mute(till_date)

                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –≤ –ë–î.
                await user.get_storage().finish_poll(poll_id, win_decision_1=win_decision,
                                                     win_decision_2=str(till_date.timestamp()))

                mute_duration = utils.format_time(int(till_date.timestamp() - now_time.timestamp()))
                win_decision_name = f"–í—ã–¥–∞—Ç—å –º—É—Ç –Ω–∞ {mute_duration}."

                text_result = ("‚òëÔ∏è <b>–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ</b>\n"
                               f"{to_user}\n\n"
                               f"–í—ã–±—Ä–∞–Ω–æ: <b>{win_decision_name}</b>\n"
                               f"–ì–æ–ª–æ—Å–æ–≤: <b>{win_decision_percent}%</b>\n\n–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º: @reireireime")
                await call.message.answer(text_result, parse_mode=HTML)

                # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–±–≤–∏–Ω—è–µ–º–æ–≥–æ.
                text_accused = (f"üö® –ù–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ —Ä–µ—à–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –≤–∞–º –±—ã–ª –≤—ã–¥–∞–Ω –º—É—Ç "
                                f"–Ω–∞ <b>{mute_duration}</b>.")
                try:
                    await call.message.bot.send_message(to_user.user_id, text_accused, parse_mode=HTML)
                except:
                    pass

            elif win_decision == "ban":
                win_decision_name = "–ò—Å–∫–ª—é—á–∏—Ç—å"

                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –≤ –ë–î.
                await user.get_storage().finish_poll(poll_id, win_decision_1=win_decision,
                                                     win_decision_2=None)

                text_result = ("‚òëÔ∏è <b>–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ</b>\n"
                               f"{to_user}\n"
                               f"–ë–∞–ª–∞–Ω—Å: <b>{utils.format_balance(to_user.balance)} ü™ô</b>\n\n"
                               f"–í—ã–±—Ä–∞–Ω–æ: <b>{win_decision_name}</b>\n"
                               f"–ì–æ–ª–æ—Å–æ–≤: <b>{win_decision_percent}%</b>\n\n–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º: @reireireime")
                await call.message.answer(text_result, parse_mode=HTML)

                await to_user.ban()
                await call.message.bot.ban_chat_member(config.CHAT_ID, to_user.user_id)

                # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–±–≤–∏–Ω—è–µ–º–æ–≥–æ.
                text_accused = (f"üö® –ù–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ —Ä–µ—à–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –≤—ã –±—ã–ª–∏ "
                                f"<b>–∏—Å–∫–ª—é—á–µ–Ω—ã –∏–∑ —á–∞—Ç–∞</b>")
                try:
                    await call.message.bot.send_message(to_user.user_id, text_accused, parse_mode=HTML)
                except:
                    pass

            elif win_decision == "mercy":
                win_decision_name = "–ü–æ–º–∏–ª–æ–≤–∞—Ç—å"

                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –≤ –ë–î.
                await user.get_storage().finish_poll(poll_id, win_decision_1=win_decision,
                                                     win_decision_2=None)

                text_result = ("‚òëÔ∏è <b>–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ</b>\n"
                               f"{to_user}\n\n"
                               f"–í—ã–±—Ä–∞–Ω–æ: <b>{win_decision_name}</b>\n"
                               f"–ì–æ–ª–æ—Å–æ–≤: <b>{win_decision_percent}%</b>\n\n–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º: @reireireime")
                await call.message.answer(text_result, parse_mode=HTML)

                # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–±–≤–∏–Ω—è–µ–º–æ–≥–æ.
                text_accused = "üö® –ù–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ —Ä–µ—à–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –≤—ã –±—ã–ª–∏ –ø–æ–º–∏–ª–æ–≤–∞–Ω—ã"
                try:
                    await call.message.bot.send_message(to_user.user_id, text_accused, parse_mode=HTML)
                except:
                    pass

            else:
                raise

            if not config.DEBUG_MODE:
                notif_text = (f"‚òëÔ∏è <b>–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ</b>\n{to_user}\n"
                              f"–ë–∞–ª–∞–Ω—Å: <b>{user.balance} –º–æ–Ω–µ—Ç–æ–∫</b>\n"
                              f"–†–µ—à–µ–Ω–∏–µ: <b>{win_decision}</b>")
                await notify(call.message.bot, notif_text)

            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ–º.
            await call.message.delete()


async def answer_bad_command(message: types.Message):
    text = (f"‚ùå <b>–ö–æ–º–∞–Ω–¥–∞ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ</b>\n"
            f"–û—Ç—Å—É—Ç—Å–≤—É—é—Ç –∞—Ä–≥—É–º–µ–Ω—Ç—ã –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã. –ü–æ—Å–º–æ—Ç—Ä–∏ –∫–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø—Ä–æ–ø–∏—Å—ã–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã "
            f"–≤ —ç—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏: {config.REF_MSG_COMMANDS}")
    await message.answer(text, parse_mode=HTML)


async def check_bad_habits(message: types.Message, user: entities.User):
    def check_include(t: str, ss: tuple) -> bool:
        for s in ss:
            if s in t:
                return True
        return False

    if message.chat.id != config.CHAT_ID:
        return

    alcohol_price = 10
    cigarettes_price = 50
    drugs_price = 100

    alcohol_emojies = ("üç∫", "üçª", "ü•Ç", "üç∑", "ü•É", "üç∏", "üçπ", "üçæ")
    cigarettes_emojies = ('üí®', 'üö¨', 'üò∂‚Äçüå´', 'üå´')
    drugs_emojies = ('üåø',)

    if message.sticker:
        text = message.sticker.emoji
    else:
        text = message.text

    # –ê–ª–∫–æ–≥–æ–ª—å.
    if check_include(text, alcohol_emojies):
        if user.balance >= alcohol_price:
            desc = ", ".join(alcohol_emojies)
            text = f"üßæ –í–∞–º –≤—ã—Å—Ç–∞–≤–ª–µ–Ω —Å—á–µ—Ç –∑–∞ –∞–ª–∫–æ–≥–æ–ª—å ({desc}): <b>{alcohol_price} ü™ô</b>"
            await user.pay(alcohol_price)
            await user.get_storage().add_payment(user.user_id, None, db.PaymentType.alcohol,
                                                 alcohol_price, db.Currency.coins)
            await message.reply(text, parse_mode=HTML)
        else:
            text = "‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç–æ–∫, —á—Ç–æ–±—ã –∫—É–ø–∏—Ç—å –∞–ª–∫–æ–≥–æ–ª—å."
            await message.reply(text)
            await message.delete()

    # –°–∏–≥–∞—Ä–µ—Ç—ã.
    elif check_include(text, cigarettes_emojies):
        if user.balance >= cigarettes_price:
            desc = ", ".join(cigarettes_emojies)
            text = f"üìù –í–∞–º –≤—ã–ø–∏—Å–∞–Ω —à—Ç—Ä–∞—Ñ –∑–∞ –∫—É—Ä–µ–Ω–∏–µ ({desc}): <b>{cigarettes_price} ü™ô</b>"
            await user.pay(cigarettes_price)
            await user.get_storage().add_payment(user.user_id, None, db.PaymentType.cigarettes,
                                                 cigarettes_price, db.Currency.coins)
            await message.reply(text, parse_mode=HTML)
        else:
            text = "‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç–æ–∫, —á—Ç–æ–±—ã –æ–ø–ª–∞—Ç–∏—Ç—å —à—Ç—Ä–∞—Ñ –∑–∞ –∫—É—Ä–µ–Ω–∏–µ."
            await message.reply(text)
            await message.delete()

    # –ù–∞—Ä–∫–æ.
    elif check_include(text, drugs_emojies):
        if user.balance >= drugs_price:
            desc = ", ".join(drugs_emojies)
            text = f"üëÆ –í–∞–º –≤—ã–ø–∏—Å–∞–Ω —à—Ç—Ä–∞—Ñ –∑–∞ –ø—Ä–æ–ø–∞–≥–∞–Ω–¥—É –Ω–∞—Ä–∫–æ—Ç–∏–∫–æ–≤ ({desc}): <b>{drugs_price} ü™ô</b>"
            await user.pay(drugs_price)
            await user.get_storage().add_payment(user.user_id, None, db.PaymentType.drugs,
                                                 drugs_price, db.Currency.coins)
            await message.reply(text, parse_mode=HTML)


async def process_report(message: types.Message, user: entities.User, args: list, bot_profile: aiogram.types.User):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∫–æ–ª—å–∫–æ –ø—Ä–æ—à–ª–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –∂–∞–ª–æ–±—ã.
    last_report_time = await user.get_last_report_time()
    if not utils.follow_cooldown(from_time=last_report_time, cooldown_seconds=config.COOLDOWN_REPORT):
        seconds_left = utils.calc_seconds_left(from_time=last_report_time, cooldown_seconds=config.COOLDOWN_REPORT)
        time_left = utils.format_time(seconds_left)

        await message.answer("‚ùå –° –º–æ–º–µ–Ω—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∂–∞–ª–æ–±—ã –ø—Ä–æ—à–ª–æ —Å–ª–∏—à–∫–æ–º "
                             f"–º–∞–ª–æ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â–µ <b>{time_left}</b>", parse_mode=HTML)
        return

    if utils.is_msg_code(args[0]):
        await message.answer("‚ùå –ù–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∂–∞–ª–æ–±—ã –ø–æ –∞–Ω–æ–Ω–∏–º–Ω–æ–º—É –∫–æ–¥—É.", parse_mode=HTML)
        return

    to_user = await search_user(user.get_storage(), message, args[0], check_mute=True, bot_profile=bot_profile)
    if to_user:
        if user.user_id == to_user.user_id:
            await message.answer("‚ùå –ù–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∂–∞–ª–æ–±—É –Ω–∞ —Å–µ–±—è.", parse_mode=HTML)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–Ω —Ç–æ–≤–∞—Ä–∏—â–µ–º –ø–æ –≥—Ä—É–ø–ø–µ.
        if user.team_id and to_user.team_id and user.team_id == to_user.team_id:
            await message.answer("‚ùå –ù–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∂–∞–ª–æ–±—É –Ω–∞ —Ç–æ–≤–∞—Ä–∏—â–∞ –ø–æ –≥—Ä—É–ø–ø–µ.", parse_mode=HTML)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–∞.
        last_poll_time = await to_user.get_last_poll_time()

        if not utils.follow_cooldown(from_time=last_poll_time, cooldown_seconds=config.COOLDOWN_USER_POLL):
            seconds_left = utils.calc_seconds_left(from_time=last_poll_time, cooldown_seconds=config.COOLDOWN_USER_POLL)
            time_left = utils.format_time(seconds_left)

            await message.answer("‚ùå –° –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –ø–æ –≤–æ–ø—Ä–æ—Å—É –∏—Å–∫–æ–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è "
                                 f"–ø—Ä–æ—à–ª–æ —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â–µ <b>{time_left}</b>", parse_mode=HTML)
            return

        comment = " ".join(args[1:])

        if comment and not utils.is_comment_cleared(comment):
            text = ("‚ùå –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∂–∞–ª–æ–±–µ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã —Ä—É—Å—Å–∫–æ–≥–æ –∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞, —Ü–∏—Ñ—Ä—ã, "
                    "–ø—Ä–æ–±–µ–ª, –∞ —Ç–∞–∫–∂–µ –∑–Ω–∞–∫–∏ <b>.,:;?!()-</b>")
            await message.answer(text, parse_mode=HTML)
            return

        if comment and len(comment) > 128:
            text = "‚ùå –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 128 —Å–∏–º–≤–æ–ª–æ–≤"
            await message.answer(text, parse_mode=HTML)
            return

        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∂–∞–ª–æ–±—É.
            await user.report(to_user, comment)

            # –£–≤–µ–¥–æ–º–ª—è–µ–º.
            to_user_field = "–ü–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω" if utils.is_msg_code(args[0]) else to_user
            text = (f"üìë <b>–ñ–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞</b>\n{to_user_field}\n\n"
                    f"<i>–í–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ –Ω–∞—á–∏—Å–ª–µ–Ω–æ –≤–∞–º –Ω–∞ –±–∞–ª–∞–Ω—Å</i>")
            await message.answer(text, parse_mode=HTML)

            text_2 = "‚ö†Ô∏è <b>–ù–∞ –≤–∞—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∂–∞–ª–æ–±–∞</b>"

            if comment:
                text_2 += f"\n\nüìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∂–∞–ª–æ–±–µ: <code>{comment}</code>"

            text_2 += ("\n\nüîñ –≠—Ç–æ —Å–¥–µ–ª–∞–ª –∫—Ç–æ-—Ç–æ –∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞. –ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã, –¥–∞–ª—å–Ω–µ–π—à–µ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ "
                       "–∂–∞–ª–æ–± –º–æ–∂–µ—Ç –æ–±–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞—á–∞–ª–æ–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –ø–æ –≤—ã–±–æ—Ä—É –≤–∞—à–µ–≥–æ –Ω–∞–∫–∞–∑–∞–Ω–∏—è.")
            try:
                await message.bot.send_message(to_user.user_id, text_2, parse_mode=HTML)
            except:
                pass

            if not config.DEBUG_MODE:
                notif_text = f"üìë <b>–ñ–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞</b>\n\n{user}\n\n{to_user}\n\n"
                await notify(message.bot, notif_text)

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ —É—Å–ª–æ–≤–∏—è.
            reports = await to_user.get_reports_sum()
            # –ß–∏—Å–ª–æ –∂–∞–ª–æ–±.
            reports_count = reports["count"]
            # –ò—Ö –æ–±—â–∏–π "–±–∞–ª–∞–Ω—Å".
            reports_sum = reports["sum"]

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Å–ª–æ–≤–∏—è –¥–ª—è –Ω–∞—á–∞–ª–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è.
            group = to_user.get_group()
            await group.update()
            if group.exists():
                group_balance = await group.get_total_balance()
                if group_balance and group_balance > to_user.balance:
                    calculated_balance = group_balance
                else:
                    calculated_balance = to_user.balance
            else:
                calculated_balance = to_user.balance

            if config.DEBUG_MODE:
                print(f"REPORT | CALC: {calculated_balance} | U: {to_user.balance}")

            # –¢—Ä–µ–±—É–µ–º—ã–π –æ–±—â–∏–π "–±–∞–ª–∞–Ω—Å" –∂–∞–ª–æ–±.
            need_reports_sum = int(calculated_balance * config.REPORT_BALANCE_MULTIPLIER)
            # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∞–ª–æ–±.
            users_count = await user.get_storage().get_users_count()
            min_reports_count = utils.calc_part_of(users_count, config.MIN_REPORT_PERCENT, config.MIN_REPORTS_COUNT)

            if config.DEBUG_MODE:
                print([reports_count, min_reports_count, reports_sum, need_reports_sum])
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –ª–∏ —É—Å–ª–æ–≤–∏—è –¥–ª—è –Ω–∞—á–∞–ª–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è.
            if reports_count >= min_reports_count and reports_sum >= need_reports_sum:

                # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤ –ë–î –Ω–æ–≤—ã–π –æ–ø—Ä–æ—Å (—É–¥–∞–ª—è—é—Ç—Å—è –≤—Å–µ –∂–∞–ª–æ–±—ã) –∏ –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ ID.
                poll_id = await to_user.register_poll()

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏.
                # –í —á–∞—Ç.
                text_3 = ("üó≥Ô∏è <b>–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è</b>\n\n"
                          f"<u>–û–±–≤–∏–Ω—è–µ–º—ã–π</u>\n{to_user}\n\n"
                          f"<b>–ü—Ä–æ–≥–æ–ª–æ—Å—É–π—Ç–µ –∑–∞ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∏–∂–µ.</b> –£ –≤–∞—Å –µ—Å—Ç—å {utils.format_time(config.TIME_TO_POLL)}. "
                          f"–í–µ—Å –≤–∞—à–µ–≥–æ –≥–æ–ª–æ—Å–∞ –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª–µ–Ω "
                          f"–≤–∞—à–µ–º—É –±–∞–ª–∞–Ω—Å—É. –ü–æ–¥—Ä–æ–±–Ω–µ–µ –ø—Ä–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è —Ç—É—Ç: {config.REF_POLL_RULE}. "
                          f"–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º: @reireireime")
                poll_message = await message.bot.send_message(config.CHAT_ID, text_3, parse_mode=HTML,
                                                              reply_markup=keyboards.poll_menu(poll_id),
                                                              disable_web_page_preview=True)
                # –ó–∞–∫—Ä–µ–ø–ª—è–µ–º –µ–≥–æ.
                await poll_message.pin(disable_notification=False)

                # –í –ª—Å –æ–±–≤–∏–Ω—è–µ–º–æ–º—É.
                text_4 = ("üö® <b>–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è</b>\n"
                          "–ü–æ –≤–∞—à–µ–º—É –≤–æ–ø—Ä–æ—Å—É –≤ —á–∞—Ç–µ –Ω–∞—á–∞–ª–æ—Å—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ. –°–æ–≤–µ—Ç—É–µ–º —Å–∫–ª–æ–Ω–∏—Ç—å –Ω–∞ —Å–≤–æ—é —Å—Ç—Ä–æ–Ω—É "
                          "–ø–æ–±–æ–ª—å—à–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Å—É—Ä–æ–≤–æ–≥–æ –Ω–∞–∫–∞–∑–∞–Ω–∏—è –∏–ª–∏ —Ö–æ—Ç—è –±—ã –µ–≥–æ —Å–º—è–≥—á–∏—Ç—å.")
                try:
                    await message.bot.send_message(to_user.user_id, text_4, parse_mode=HTML,
                                                   reply_markup=keyboards.poll_url_menu(poll_message.message_id))
                except:
                    pass

                # –í –ª—Å —Ç–æ–º—É, –∫—Ç–æ –ø–æ–∂–∞–ª–æ–≤–∞–ª—Å—è.
                text_5 = ("‚òëÔ∏è <b>–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è</b>\n"
                          "–í–∞—à–∞ –∂–∞–ª–æ–±–∞ –æ–∫–∞–∑–∞–ª–∞—Å—å —Ä–µ—à–∞—é—â–µ–π.")
                try:
                    await message.bot.send_message(user.user_id, text_5, parse_mode=HTML,
                                                   reply_markup=keyboards.poll_url_menu(poll_message.message_id))
                except:
                    pass

                if not config.DEBUG_MODE:
                    notif_text = f"üó≥Ô∏è <b>–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è</b>\n\n{user}\n\n{to_user}\n\n"
                    await notify(message.bot, notif_text)

            else:
                text_3 = ("üîñ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∞–ª–æ–± –Ω–∞ –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ. "
                          "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–±–µ–¥–∏—Ç—å –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ç–∞–∫–∂–µ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è –Ω–∞ –≤–∞—à–µ–≥–æ –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞.")
                await message.answer(text_3)

        except Exception as e:
            print(f"REPORT ERROR: {e}")
            text = (f"‚ùå –û—à–∏–±–∫–∞ - —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –í–æ–∑–º–æ–∂–Ω–æ –≤—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –∂–∞–ª–æ–±—É –Ω–∞ –¥–∞–Ω–Ω–æ–≥–æ "
                    f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            await message.answer(text)


async def show_tasks(message: types.Message, _: entities.User):
    text = ("‚ú¥Ô∏è <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è</b>\n"
            "–ü—Ä–µ–¥–ª–æ–∂–∏ –Ω–æ–≤—É—é –º–µ—Ö–∞–Ω–∏–∫—É –≤ —á–∞—Ç–µ –∏ –ø–æ–ª—É—á–∏ "
            "<b>–æ—Ç 100 –¥–æ 500 –º–æ–Ω–µ—Ç–æ–∫</b>.\n"
            "–° –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏ –ø–∏—Å–∞—Ç—å <a href='https://t.me/reireireime'>—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É</a>")
    await message.answer(text, parse_mode=HTML, disable_web_page_preview=True)


async def show_sending_crystals_procedure(message: types.Message, user: entities.User, args: list,
                                          bot_profile: aiogram.types.User):
    try:
        search_text = args[0]
        amount = int(args[1])
        comment = " ".join(args[2:])

        if not await user.can_send():
            text = ("‚ùå <b>–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥</b>\n"
                    f"–° –º–æ–º–µ–Ω—Ç–∞ –Ω–∞—á–∞–ª–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –ø–æ –≤–∞—à–µ–º—É –≤–æ–ø—Ä–æ—Å—É –Ω–µ –ø—Ä–æ—à–ª–æ {utils.format_time(config.TIME_TO_POLL)}")
            await message.answer(text, parse_mode=HTML)
            return

        if user.user_id != message.chat.id:
            await message.answer("‚ùå –ù–µ–ª—å–∑—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥ –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—É–±–ª–∏—á–Ω–æ. "
                                 "–ù–∞–ø–∏—à–∏ –º–Ω–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.", parse_mode=HTML)
            return

        if comment:
            comment = comment.replace("<", "").replace(">", "")

        if comment and len(comment) > 128:
            text = "‚ùå –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 128 —Å–∏–º–≤–æ–ª–æ–≤"
            await message.answer(text, parse_mode=HTML)
            return

        if not (user.crystals >= amount):
            text = "‚ùå –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞"
            await message.answer(text, parse_mode=HTML)
            return

        to_user = await search_user(user.get_storage(), message, search_text, check_mute=True, bot_profile=bot_profile)
        if to_user:
            if to_user.user_id == user.user_id:
                text = "‚ùå –ù–µ–ª—å–∑—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥ —Å–µ–±–µ"
                await message.answer(text, parse_mode=HTML)
                return

            # –ï—Å–ª–∏ –Ω–µ –∞–Ω–æ–Ω –ø–µ—Ä–µ–≤–æ–¥ –∏ –ø–æ–ª–∏—Ç–∏–∫–∞.
            if not utils.is_msg_code(search_text) and to_user.policy == 2:
                group = user.get_group()
                if not (await group.is_member(to_user.user_id)):
                    text = ("‚ùå –ß—Ç–æ–±—ã –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –≤—ã –¥–æ–ª–∂–Ω—ã —Å–æ—Å—Ç–æ—è—Ç—å —Å –Ω–∏–º "
                            "–≤ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø–µ.")
                    await message.answer(text, parse_mode=HTML)
                    return

            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥.
            await user.send_crystals(to_user, amount, comment)

            to_user_field = "–ü–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω" if utils.is_msg_code(search_text) else to_user
            text = (f"‚¨ÜÔ∏è <b>–ü–µ—Ä–µ–≤–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω</b>\n{to_user_field}\n"
                    f"–°—É–º–º–∞: <b>{amount} üíé</b>")
            if comment:
                text += f"\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: <code>{comment}</code>"
            await message.answer(text, parse_mode=HTML)

            text_2 = (f"‚¨áÔ∏è <b>–í—Ö–æ–¥—è—â–∏–π –ø–µ—Ä–µ–≤–æ–¥</b>\n"
                      f"–°—É–º–º–∞: <b>{amount} üíé</b>")
            if comment:
                text_2 += f"\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: <code>{comment}</code>"
            try:
                await message.bot.send_message(to_user.user_id, text_2, parse_mode=HTML)
            except:
                pass

    except:
        text = (f"‚ùå –û—à–∏–±–∫–∞ - —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–∞—à–µ–π "
                f"–≤–≤–µ–¥–µ–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        await message.answer(text, parse_mode=HTML)


async def show_sending_procedure(message: types.Message, user: entities.User, args: list,
                                 bot_profile: aiogram.types.User):
    try:
        search_text = args[0]
        amount = int(args[1])
        comment = " ".join(args[2:])

        if not await user.can_send():
            text = ("‚ùå <b>–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥</b>\n"
                    f"–° –º–æ–º–µ–Ω—Ç–∞ –Ω–∞—á–∞–ª–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –ø–æ –≤–∞—à–µ–º—É –≤–æ–ø—Ä–æ—Å—É –Ω–µ –ø—Ä–æ—à–ª–æ {utils.format_time(config.TIME_TO_POLL)}")
            await message.answer(text, parse_mode=HTML)
            return

        if user.user_id != message.chat.id:
            await message.answer("‚ùå –ù–µ–ª—å–∑—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥ –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—É–±–ª–∏—á–Ω–æ. "
                                 "–ù–∞–ø–∏—à–∏ –º–Ω–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.", parse_mode=HTML)
            return

        if comment:
            comment = comment.replace("<", "").replace(">", "")

        if comment and len(comment) > 128:
            text = "‚ùå –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 128 —Å–∏–º–≤–æ–ª–æ–≤"
            await message.answer(text, parse_mode=HTML)
            return

        to_user = await search_user(user.get_storage(), message, search_text, check_mute=True, bot_profile=bot_profile)
        if to_user:
            if to_user.user_id == user.user_id:
                text = "‚ùå –ù–µ–ª—å–∑—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥ —Å–µ–±–µ"
                await message.answer(text, parse_mode=HTML)
                return

            # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–º–∏—Å—Å–∏–∏ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ.
            fee_sum = utils.calc_fee(amount, config.FEE_SEND, config.PRICE_SEND)
            amount_with_fee = int(amount + fee_sum)

            anon_transfer = utils.is_msg_code(search_text)

            # –ï—Å–ª–∏ –Ω–µ –∞–Ω–æ–Ω –ø–µ—Ä–µ–≤–æ–¥ –∏ –ø–æ–ª–∏—Ç–∏–∫–∞.
            if not anon_transfer and to_user.policy == 2:
                group = user.get_group()
                if not (await group.is_member(to_user.user_id)):
                    text = ("‚ùå –ß—Ç–æ–±—ã –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –≤—ã –¥–æ–ª–∂–Ω—ã —Å–æ—Å—Ç–æ—è—Ç—å —Å –Ω–∏–º "
                            "–≤ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø–µ.")
                    await message.answer(text, parse_mode=HTML)
                    return

            if user.balance >= amount_with_fee:
                if 0 < amount <= 9_000_000:
                    payment_id = await user.send(to_user, amount, fee_sum, comment)

                    to_user_field = "–ü–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω" if anon_transfer else to_user
                    text = (f"üí∏ <b>–ü–µ—Ä–µ–≤–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω</b>\n{to_user_field}\n"
                            f"–°—É–º–º–∞: <b>{utils.format_balance(amount)} ü™ô</b>\n"
                            f"–ö–æ–º–∏—Å—Å–∏—è: <b>{utils.format_balance(fee_sum)} ü™ô</b>")
                    if comment:
                        text += f"\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: <code>{comment}</code>"
                    await message.answer(text, parse_mode=HTML)

                    text_2 = (f"üíµ <b>–í—Ö–æ–¥—è—â–∏–π –ø–µ—Ä–µ–≤–æ–¥</b>\n"
                              f"ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: <code>{payment_id}</code>\n"
                              f"–°—É–º–º–∞: <b>{utils.format_balance(amount)} ü™ô</b>")
                    if comment:
                        text_2 += f"\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: <code>{comment}</code>"
                    try:
                        await message.bot.send_message(to_user.user_id, text_2, parse_mode=HTML)
                    except:
                        pass

                    if config.NEED_RECEIPT:
                        await message.answer("üìù –§–æ—Ä–º–∏—Ä—É—é –∫–≤–∏—Ç–∞–Ω—Ü–∏—é...")

                        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–≤–∏—Ç–∞–Ω—Ü–∏—é –æ –ø–µ—Ä–µ–≤–æ–¥–µ.
                        try:
                            if anon_transfer:
                                to_account_id = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                            else:
                                to_account_id = to_user.user_id

                            utils.create_receipt(to_account_id, amount, fee_sum, datetime.datetime.now(), payment_id)
                            await message.answer_photo(types.InputFile(f"receipts/receipt_{payment_id}.jpg"))
                        except:
                            pass

                else:
                    text = "‚ùå –°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 1 –º–æ–Ω–µ—Ç–∫–∏ –∏ –Ω–µ –±–æ–ª–µ–µ 9'000'000 –º–æ–Ω–µ—Ç–æ–∫"
                    await message.answer(text, parse_mode=HTML)

            else:
                text = ("‚ùå <b>–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –º–æ–Ω–µ—Ç–æ–∫</b>\n"
                        f"–° —É—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–∏ <b>{config.FEE_SEND}%</b> –≤–∞–º –Ω—É–∂–Ω–æ <b>{utils.format_balance(amount_with_fee)} ü™ô</b>\n"
                        f"–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: <b>{utils.format_balance(user.balance)} ü™ô</b>")
                await message.answer(text, parse_mode=HTML)
    except:
        text = (f"‚ùå –û—à–∏–±–∫–∞ - —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–∞—à–µ–π "
                f"–≤–≤–µ–¥–µ–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        await message.answer(text, parse_mode=HTML)


async def control_anon_code(event: types.Message | types.CallbackQuery, user: entities.User):
    try:
        if isinstance(event, types.Message):
            if user.msg_code:
                text = ("üí¨ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–Ω–æ–Ω–∏–º–Ω—ã–º –∫–æ–¥–æ–≤</b>\n\n"
                        f"–í–∞—à –∞–Ω–æ–Ω–∏–º–Ω—ã–π –∫–æ–¥: <code>{user.get_msg_code()}</code>\n\n"
                        f"–ï–≥–æ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–∞—Ö, –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –¥—Ä—É–≥–∏—Ö –≤–∏–¥–∞—Ö "
                        f"–≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –≤–º–µ—Å—Ç–æ –≤–∞—à–µ–≥–æ ID –∏–ª–∏ —é–∑–µ—Ä–Ω–µ–π–º–∞ –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è –≤–∞—à–µ–π –ª–∏—á–Ω–æ—Å—Ç–∏.")
                await event.reply(text, parse_mode=HTML,
                                  reply_markup=keyboards.msg_code_menu(user.user_id, True))
            else:
                text = ("üí¨ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–Ω–æ–Ω–∏–º–Ω—ã–º –∫–æ–¥–æ–≤</b>\n\n"
                        f"–í—ã –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–ª–∏ –≤–∞—à –∞–Ω–æ–Ω–∏–º–Ω—ã–π –∫–æ–¥.\n\n"
                        f"–ï–≥–æ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–∞—Ö, –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –¥—Ä—É–≥–∏—Ö –≤–∏–¥–∞—Ö "
                        f"–≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –≤–º–µ—Å—Ç–æ –≤–∞—à–µ–≥–æ ID –∏–ª–∏ —é–∑–µ—Ä–Ω–µ–π–º–∞ –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è –≤–∞—à–µ–π –ª–∏—á–Ω–æ—Å—Ç–∏.")
                await event.reply(text, parse_mode=HTML,
                                  reply_markup=keyboards.msg_code_menu(user.user_id, False))
        else:
            person_id = int(event.data.split("_")[-1])
            new_code_price = config.PRICE_MSG_CODE

            assert user.user_id == person_id, "–°–æ–æ–±—â–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–æ–≤–∞–Ω–æ –Ω–µ –≤–∞–º"

            if event.data.startswith("create_msg_code_"):
                text = ("‚ÑπÔ∏è <b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–¥–∞</b>\n"
                        f"–°—Ç–æ–∏–º–æ—Å—Ç—å: <b>{new_code_price} ü™ô</b>")
                rpl = keyboards.msg_code_menu(user.user_id, has_code=True, confirmed=True)

            elif event.data.startswith("recreate_msg_code_"):
                text = ("‚ÑπÔ∏è <b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–¥–∞</b>\n\n"
                        "‚ö†Ô∏è <b>–í–∞—à –ø—Ä–æ—à–ª—ã–π –∫–æ–¥ –ø–µ—Ä–µ—Å—Ç–∞–Ω–µ—Ç –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å.</b> –ï—Å–ª–∏ –≤—ã –∫–æ–º—É-—Ç–æ –µ–≥–æ —Å–æ–æ–±—â–∞–ª–∏, "
                        "—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å–º–æ–∂–µ—à—å –±–æ–ª—å—à–µ –ø–æ –Ω–µ–º—É —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è.\n\n"
                        f"–°—Ç–æ–∏–º–æ—Å—Ç—å: <b>{new_code_price} ü™ô</b>")
                rpl = keyboards.msg_code_menu(user.user_id, has_code=True, confirmed=True)

            elif event.data.startswith("dorecreate_msg_code_"):
                assert user.balance >= new_code_price, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç–æ–∫"
                await user.create_msg_code()

                text = ("üí¨ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–Ω–æ–Ω–∏–º–Ω—ã–º –∫–æ–¥–æ–≤</b>\n\n"
                        f"–í–∞—à –∞–Ω–æ–Ω–∏–º–Ω—ã–π –∫–æ–¥: <code>{user.get_msg_code()}</code>\n\n"
                        f"–ï–≥–æ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–∞—Ö, –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –¥—Ä—É–≥–∏—Ö –≤–∏–¥–∞—Ö "
                        f"–≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –≤–º–µ—Å—Ç–æ –≤–∞—à–µ–≥–æ ID –∏–ª–∏ —é–∑–µ—Ä–Ω–µ–π–º–∞ –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è –≤–∞—à–µ–π –ª–∏—á–Ω–æ—Å—Ç–∏.")
                rpl = keyboards.msg_code_menu(user.user_id, has_code=False, confirmed=False)

            else:
                raise "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞"

            await event.message.edit_text(text, parse_mode=HTML, reply_markup=rpl)

    except Exception as e:
        text = f"‚ùå {e}"
        if isinstance(event, types.Message):
            await event.answer(text, parse_mode=HTML)
        else:
            await event.answer(text, show_alert=True)


async def send_msg(event: types.Message, user: entities.User, bot_profile: aiogram.types.User):
    try:
        try:
            if not event.reply_to_message:
                raise

            # answ_{from_id}_{user_id}_{dialog_id:5}
            load = event.reply_to_message.reply_markup.inline_keyboard[0][0].callback_data
            assert "answ_" in load

            to_search_text = load.split("_")[1]
            to_id = int(load.split("_")[2])

            if load.count("_") == 3:
                dialog_id = load.split("_")[3]
            else:
                dialog_id = utils.create_dialog_id()

            assert to_id == user.user_id, "–°–æ–æ–±—â–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–æ–≤–∞–Ω–æ –Ω–µ –≤–∞–º"
            message_text = " ".join(event.text.split()[1:])
            replied = True
        except:
            dialog_id = utils.create_dialog_id()
            to_search_text = event.text.split()[1]
            message_text = " ".join(event.text.split()[2:])
            replied = False

        if config.DEBUG_MODE:
            print(f"to_search_text: {to_search_text}")

        message_text = message_text.replace("<", "").replace(">", "")
        assert message_text, "–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"

        assert 1 <= len(message_text) <= 512, ("–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ "
                                               "512-—Ç–∏ —Å–∏–º–≤–æ–ª–æ–≤ –≤ –¥–ª–∏–Ω—É.")

        assert user.balance >= config.PRICE_MSG_SEND, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç–æ–∫ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ"

        to_user = await search_user(user.get_storage(), event, to_search_text, True, bot_profile)
        if to_user:
            await user.send_message(to_user, message_text, dialog_id)

            to_account = to_search_text
            if to_account[0].isdigit():
                to_account = to_account.upper()
            try:
                if replied:
                    text = (f"üì© <b>–û—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b>\n\n"
                            f"ID –¥–∏–∞–ª–æ–≥–∞: <code>{dialog_id}</code>\n\n"
                            f"{message_text}")
                else:
                    text = (f"üì© <b>–í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b>\n\n"
                            f"ID –¥–∏–∞–ª–æ–≥–∞: <code>{dialog_id}</code>\n\n"
                            f"{message_text}")
                rpl = keyboards.answer_letter_menu(
                    from_id=user.user_id,
                    user_id=to_user.user_id,
                    dialog_id=dialog_id
                )
                await event.bot.send_message(to_user.user_id, text, parse_mode=HTML,
                                             reply_markup=rpl)
            except:
                text = (f"‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ</b>\n"
                        f"–í–æ–∑–º–æ–∂–Ω–æ —É –ø–æ–ª—É—á–∞—Ç–µ–ª—è –Ω–µ—Ç –¥–∏–∞–ª–æ–≥–∞ —Å –ê—é–º–∏ –∏–ª–∏ –æ–Ω –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –µ—ë.")
                await event.answer(text, parse_mode=HTML)
            else:
                show_to_account = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ" if replied else to_account
                text = (f"üìß <b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ</b>\n–ü–æ–ª—É—á–∞—Ç–µ–ª—å: <code>{show_to_account}</code>"
                        f"\nID –¥–∏–∞–ª–æ–≥–∞: <code>{dialog_id}</code>"
                        f"\n\n{message_text}\n\n")
                await event.answer(text, parse_mode=HTML)

    except Exception as e:
        text = f"‚ùå {e}"
        await event.answer(text, parse_mode=HTML)


async def trade(event: types.Message | types.CallbackQuery, user: entities.User):
    try:
        # /offerbuy [user] [crystals] [coins]
        # /offersell [user] [crystals] [coins]
        ...


    except Exception as e:
        text = f"‚ùå {e}"
        if isinstance(event, types.Message):
            await event.answer(text, parse_mode=HTML)
        else:
            await event.answer(text, show_alert=True)


async def hack(event: types.Message | types.CallbackQuery, user: entities.User):
    try:
        if isinstance(event, types.Message):
            bank_id = event.text.split()[1]
            mb_password: str = event.text.split()[2].lower()

            assert bank_id.isdigit(), "–ù–æ–º–µ—Ä —Å—á–µ—Ç–∞ –¥–æ–ª–∂–µ–Ω —è–≤–ª—è–µ—Ç—Å—è —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º"
            bank_id = int(bank_id)

            assert utils.is_text_cleared(mb_password) and len(mb_password) <= 6, (
                f"–ü–∞—Ä–æ–ª—å –º–æ–∂–µ—Ç —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ –±—É–∫–≤ –ª–∞—Ç–∏–Ω—Å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞ (abcde...) –∏ "
                f"—Ü–∏—Ñ—Ä (0123...) –∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –±–æ–ª—å—à–µ 6-—Ç–∏ —Å–∏–º–≤–æ–ª–æ–≤ –≤ –¥–ª–∏–Ω—É."
            )

            bank = await user.get_storage().get_bank_by_id(bank_id)
            assert bank, "–ë–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ —Å—á–µ—Ç–∞ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
            assert bank['user_id'] != user.user_id, "–≠—Ç–æ—Ç —Å—á–µ—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º"

            text = (f"üíª <b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É –ø–∞—Ä–æ–ª—è</b>\n"
                    f"–ù–æ–º–µ—Ä –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å—á–µ—Ç–∞: <b>{bank_id}</b>\n"
                    f"–ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–π –ø–∞—Ä–æ–ª—å: <b>{mb_password.upper()}</b>\n"
                    f"–°—Ç–æ–∏–º–æ—Å—Ç—å: <b>{config.PRICE_HACK_CRYSTALS} üíé</b>")
            await event.reply(text, parse_mode=HTML,
                              reply_markup=keyboards.hack_menu(user.user_id, bank_id, mb_password))

        else:
            # hack_{user_id}_{bank_id}_{mb_password}
            hacker_id = int(event.data.split("_")[1])
            bank_id = int(event.data.split("_")[2])
            mb_password = event.data.split("_")[3]

            assert hacker_id == user.user_id, "–°–æ–æ–±—â–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–æ–≤–∞–Ω–æ –Ω–µ –≤–∞–º"
            assert user.crystals >= config.PRICE_HACK_CRYSTALS, "–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤"

            bank = await user.get_storage().get_bank_by_id(bank_id)
            assert bank, "–ë–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ —Å—á–µ—Ç–∞ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
            bank_password = bank['a_password']

            bank_owner_id: int = bank['user_id']
            group = user.get_group()
            assert not (await group.is_member(bank_owner_id)), ("–í–ª–∞–¥–µ–ª–µ—Ü –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ —Å—á–µ—Ç–∞ "
                                                                "—è–≤–ª—è–µ—Ç—Å—è –≤–∞—à–∏–º —Ç–æ–≤–∞—Ä–∏—â–µ–º –ø–æ –≥—Ä—É–ø–ø–µ")

            bank_owner = entities.User(user.get_storage(), bank_owner_id)
            await bank_owner.load_from_db()

            # –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –≥—Ä—É–ø–ø—ã –≤–ª–∞–¥–µ–ª—å—Ü–∞ —Å—á–µ—Ç–∞.
            owner_group = bank_owner.get_group()
            owner_group_level = await owner_group.get_level()

            # –í—ã—á–∏—Å–ª—è–µ–º —É—Å–ø–µ—à–Ω–∞—è –ª–∏ –ø–æ–ø—ã—Ç–∫–∞.
            successfully = utils.can_hack(bank_owner.protect_level, owner_group_level)

            # –°–ø–∏—Å—ã–≤–∞–µ–º –∫—Ä–∏—Å—Ç–∞–ª–ª—ã –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–ª–∞—Ç–µ–∂.
            await user.get_storage().remove_user_crystals(user.user_id, config.PRICE_HACK_CRYSTALS)
            await user.get_storage().add_payment(user.user_id, None, db.PaymentType.hack,
                                                 config.PRICE_HACK_CRYSTALS, db.Currency.crystals)
            await user.add_hack_attempt(bank_id, mb_password, bank_password, successfully)

            if not successfully:
                text = (f"üõ∞Ô∏è <b>–û—à–∏–±–∫–∞ - –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ –ø–æ–º–µ—Ö–∏</b>\n"
                        f"–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∑–∞—â–∏—Ç–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞ —Å—á–µ—Ç–∞ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∞ –≤–∞—à—É —Ö–∞–∫–µ—Ä—Å–∫—É—é "
                        f"–∞—Ç–∞–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.\n"
                        f"–°–ø–∏—Å–∞–Ω–æ —Å –±–∞–ª–∞–Ω—Å–∞: <b>{config.PRICE_HACK_CRYSTALS} üíé</b>")

                await event.message.edit_text(text, parse_mode=HTML)
                return

            h = utils.check_password_user(bank_password, mb_password)

            result: bool = h['result']
            description: str = h['description']

            result_string = "‚úÖ –ü–∞—Ä–æ–ª–∏ —Å–æ–≤–ø–∞–¥–∞—é—Ç" if result else "‚ùå –ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç"

            text = ("üì° <b>–û—Ç—á–µ—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π</b>\n\n"
                    "–ë—É–∫–≤—ã: <b>A B C D E F G H I J K L M N O P Q R S T U V W X Y Z</b>\n"
                    "–¶–∏—Ñ—Ä—ã: <b>0 1 2 3 4 5 6 7 8 9</b>\n\n"
                    f"–í–≤–µ–¥–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å: <b>{mb_password.upper()}</b>\n"
                    f"–†–µ–∑—É–ª—å—Ç–∞—Ç: <b>{result_string}</b>\n\n"
                    f"<u>–ê–Ω–∞–ª–∏–∑ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π</u>\n{description}\n\n"
                    f"<u>–£—á–∏—Ç—ã–≤–∞–π—Ç–µ, —á—Ç–æ –ø–∞—Ä–æ–ª—å —É —Å—á–µ—Ç–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç 1 –¥–æ 6-—Ç–∏ —Å–∏–º–≤–æ–ª–æ–≤.</u> "
                    f"–°–∏–º–≤–æ–ª—ã: ‚ùå - –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Ç–∏–ø (–±—É–∫–≤–∞ –≤–º–µ—Å—Ç–æ —Ü–∏—Ñ—Ä—ã –∏–ª–∏ –Ω–∞–æ–±–æ—Ä–æ—Ç), "
                    f"‚ôªÔ∏è - –Ω–µ—Ç —Å–∏–º–≤–æ–ª–∞ (–ø–∞—Ä–æ–ª—å –∫–æ—Ä–æ—á–µ), ‚¨ÜÔ∏è - –±—É–∫–≤–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–ª–∏–∂–µ –∫ "
                    f"–Ω–∞—á–∞–ª—É –∞–ª—Ñ–∞–≤–∏—Ç–∞ (—Ü–∏—Ñ—Ä–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ), ‚¨áÔ∏è - –Ω–∞–æ–±–æ—Ä–æ—Ç, ‚òëÔ∏è - —Å–∏–º–≤–æ–ª "
                    f"—Å–æ–≤–ø–∞–¥–∞–µ—Ç.")
            await event.message.edit_text(text, parse_mode=HTML)

    except Exception as e:
        text = f"‚ùå {e}"
        if isinstance(event, types.Message):
            await event.answer(text, parse_mode=HTML)
        else:
            await event.answer(text, show_alert=True)


async def show_group_members(call: types.CallbackQuery, user: entities.User):
    # memberslist_{leader_id}_{group_id}
    leader_id = int(call.data.split("_")[1])
    call_group_id = int(call.data.split("_")[2])

    if user.user_id != leader_id:
        await call.answer("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–æ–≤–∞–Ω–æ –Ω–µ –≤–∞–º", show_alert=True)
        return

    group = user.get_group()
    if group.group_id != call_group_id:
        await call.answer("‚ùå –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ", show_alert=True)
        return

    await group.update()
    if not (await group.is_leader(user.user_id)):
        await call.answer("‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –ª–∏–¥–µ—Ä–æ–º —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã", show_alert=True)
        return

    await call.message.edit_text("‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è—é —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤...")

    members = await group.get_members()
    if members:
        file_caption = (f"–£—á–∞—Å—Ç–Ω–∏–∫–∏ –≥—Ä—É–ø–ø—ã '{group.get_name()}'\n"
                        "ID | Username | –ò–º—è | –§–∞–º–∏–ª–∏—è | –ë–∞–ª–∞–Ω—Å | –ö—Ä–∏—Å—Ç–∞–ª–ª—ã\n")
        file_data = "\n".join([
            f"{u['user_id']} | {u['username']} | {u['first_name']} | {u['last_name']} | {u['balance']} | {u['crystals']}"
            for u in members
        ])
        file_text = file_caption + file_data

        async with aiofiles.open("members.txt", mode="w", loop=asyncio.get_event_loop()) as f:
            await f.write(file_text)

        await call.bot.send_document(user.user_id, types.InputFile("members.txt"),
                                     caption=f"–°–ø–∏—Å–æ–∫ {len(members)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")

    else:
        await call.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", show_alert=True)


async def show_all_users(message: types.Message, user: entities.User):
    await message.answer("‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è—é —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
    users = await user.get_storage().get_users()

    if users:
        file_caption = "ID | Username | –ò–º—è | –§–∞–º–∏–ª–∏—è\n"
        file_data = "\n".join([
            f"{u['user_id']} | {u['username']} | {u['first_name']} | {u['last_name']}"
            for u in users if not (u['user_id'] in config.ADMINS)
        ])
        file_text = file_caption + file_data

        async with aiofiles.open("users.txt", mode="w", loop=asyncio.get_event_loop()) as f:
            await f.write(file_text)

        await message.answer_document(types.InputFile("users.txt"), caption=f"–°–ø–∏—Å–æ–∫ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    else:
        text = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
        await message.answer(text)


async def show_agreement(message: types.Message, user: entities.User, reply: bool = False):
    shown_first_name = user.first_name.replace("<", "").replace(">", "")
    if user.last_name:
        shown_last_name = " " + user.last_name.replace("<", "").replace(">", "")
    else:
        shown_last_name = ""

    text = (
        f"<b>–î–æ—Ä–æ–≥–æ–π –Ω–æ–≤–æ–ø—Ä–∏–±—ã–≤—à–∏–π <a href='tg://user?id={user.user_id}'>{shown_first_name}{shown_last_name}</a>, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à —á–∞—Ç–∏–∫</b>\n\n"
        f"üÜî –í–∞–º –ø—Ä–∏—Å–≤–æ–µ–Ω –Ω–æ–º–µ—Ä: <tg-spoiler>{user.user_id}</tg-spoiler>\n\n"
        "‚úã <b>–ó–¥–µ—Å—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è.</b> –£—á–∞—Å—Ç–Ω–∏–∫–∏ –≤ –ø—Ä–∞–≤–µ —Å–∞–º–∏ –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å, "
        "—á—Ç–æ –µ—Å—Ç—å —Ö–æ—Ä–æ—à–æ, –∞ —á—Ç–æ –µ—Å—Ç—å –ø–ª–æ—Ö–æ.\n\n"
        "‚ö†Ô∏è <b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–æ—á–∏—Ç–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞:</b> https://t.me/c/1896008686/17 "
        "(—Ç–∞–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π). –ï—Å–ª–∏ –≤—ã –Ω–µ —Å–æ–≥–ª–∞—Å–Ω—ã —Å –Ω–∏–º–∏, —Ç–æ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–∫–∏–Ω—å—Ç–µ –≥—Ä—É–ø–ø—É.\n\n"
        f"‚ò¢Ô∏è <b>–£ –≤–∞—Å –µ—Å—Ç—å {utils.format_time(config.TIME_TO_AGREED)}, —á—Ç–æ–±—ã –ø—Ä–∏–Ω—è—Ç—å –ø—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞.</b>")

    inter = message.reply if reply else message.answer
    await inter(text, parse_mode=HTML, reply_markup=keyboards.agreement_menu(user.user_id),
                disable_web_page_preview=True)


async def search_user(storage: db.Storage, event: types.Message | types.CallbackQuery, search_text: str | int,
                      check_mute: bool, bot_profile: types.User) -> entities.User | None:
    """check_mute = True -> –∏—Å–∫–ª—é—á–∞–µ—Ç –∏–∑ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –º—É—Ç–µ"""
    search_text = str(search_text).replace("@", "")
    if not utils.is_text_cleared(search_text, extra="_"):
        text = "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –µ–≥–æ ID"

        if isinstance(event, types.Message):
            await event.answer(text)
        else:
            await event.answer(text, show_alert=True)

        return

    if search_text.replace("@", "") in (bot_profile.id, bot_profile.username):
        text = "‚ùå –ù–µ–ª—å–∑—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ —Å –ê—é–º–∏"

        if isinstance(event, types.Message):
            await event.answer(text)
        else:
            await event.answer(text, show_alert=True)

        return

    person = await entities.search_user(storage, search_text)

    if person:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º—É—Ç.
        if person.is_muted() and check_mute:
            text = "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ–∫–∞ –∏—Å–∫–æ–º—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –º—É—Ç–µ"
            if isinstance(event, types.Message):
                await event.answer(text)
            else:
                await event.answer(text, show_alert=True)

        else:
            return person

    else:
        text = "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
        if isinstance(event, types.Message):
            await event.answer(text)
        else:
            await event.answer(text, show_alert=True)


async def check_availability(bot: Bot, action: types.Message, user: entities.User,
                             call: types.CallbackQuery | None = None,
                             ignore_agree: bool = False) -> entities.AvailabilityReport:
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º ID –Ω–∞ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã–µ.
    if user.user_id in config.IGNORED_IDS:
        return entities.AvailabilityReport(result=False)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª—Å —ç—Ç–æ –∏–ª–∏ —á–∞—Ç.
    now_chat_id = action.chat.id
    if not (now_chat_id == config.CHAT_ID or now_chat_id == user.user_id):
        return entities.AvailabilityReport(result=False)
    in_chat = (now_chat_id == config.CHAT_ID)

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –ë–î –∏ –æ–Ω –Ω–∞–ø–∏—Å–∞–ª –≤ –ª—Å.
    if not await user.exists():
        if in_chat:
            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î.
            await user.update()
            await show_agreement(action, user)
        else:
            text = ("‚ùå –Ø –Ω–µ –Ω–∞—à–ª–∞ —Ç–≤–æ–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ —É —Å–µ–±—è –≤ –∑–∞–ø–∏—Å—è—Ö.\n"
                    "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –ø–æ–∫–∞ –Ω–µ –º–æ–≥—É —Å–∫–∏–Ω—É—Ç—å —Ç–µ–±–µ —Å—Å—ã–ª–∫—É –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —á–∞—Ç.")
            await action.answer(text)
        return entities.AvailabilityReport(result=False, delete=in_chat)

    # –ü—Ä–æ–≤–µ—Ä—è–º –Ω–∞ –∞–¥–º–∏–Ω —Å—Ç–∞—Ç—É—Å.
    if user.admin():
        return entities.AvailabilityReport(result=True)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–Ω —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    if user.banned:
        if in_chat:
            # –ï—Å–ª–∏ —ç—Ç–æ —á–∞—Ç, —Ç–æ –±–∞–Ω–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç–µ.
            await bot.ban_chat_member(config.CHAT_ID, user.user_id)
            text = f"‚õî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{user.user_id}</code> –∏—Å–∫–ª—é—á–µ–Ω"
            await action.answer(text, parse_mode=HTML)
        else:
            # –ï—Å–ª–∏ —ç—Ç–æ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.
            text = "‚õî –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ —á–∞—Ç–µ"
            if call:
                await call.answer(text, show_alert=True)
            else:
                await action.answer(text, parse_mode=HTML)

        return entities.AvailabilityReport(False, in_chat and not call)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º AGREED —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∫—Ä–æ–º–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –ø—Ä–∏–Ω—è—Ç–∏—è —Å–æ–≥–ª–∞—à–µ–Ω–∏—è).
    if not ignore_agree:
        if not user.agreed and call:
            text = ("‚ùå –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, —á—Ç–æ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ –≥—Ä—É–ø–ø—ã.\n"
                    "–î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–ø–∏—à–∏—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª—Å –ê—é–º–∏ (–±–æ—Ç—É).")
            await call.answer(text, show_alert=True)

            return entities.AvailabilityReport(result=False, delete=False)

        elif user.agreed is None:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –µ—â–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–æ—Å—å —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ.
            await show_agreement(action, user)
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º agreed = 0, —á—Ç–æ–±—ã –±–æ–ª—å—à–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ.
            await user.set_agreed(new_value=False)

            return entities.AvailabilityReport(result=False, delete=in_chat)

        elif not user.agreed and isinstance(action, types.Message):
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–ø—Ä–∞–≤–ª–∏–ª–∏ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ, –Ω–æ –æ–Ω –µ—â–µ –Ω–µ –ø—Ä–∏–Ω—è–ª –µ–≥–æ.
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ—à–ª–æ.
            now_time = datetime.datetime.now()

            # –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏, —Ç–æ –±–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
            if now_time.timestamp() - user.created.timestamp() > config.TIME_TO_AGREED:
                await user.ban()
                await bot.ban_chat_member(config.CHAT_ID, user.user_id)

                if in_chat:
                    text = (f"‚õîÔ∏è <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—Å–∫–ª—é—á–µ–Ω</b>\n{user}\n–ë–∞–ª–∞–Ω—Å: <b>{utils.format_balance(user.balance)} ü™ô</b>\n\n"
                            f"–ü—Ä–∏—á–∏–Ω–∞: –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —Å–æ–≥–ª–∞—Å–∏–µ —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –≥—Ä—É–ø–ø—ã –≤ —Ç–µ—á–µ–Ω–∏–µ {utils.format_time(config.TIME_TO_AGREED)}.")
                    await action.answer(text, parse_mode=HTML)

                else:
                    text = ("‚õîÔ∏è –í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã, —Ç–∞–∫ –∫–∞–∫ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ —Å–æ–≥–ª–∞—Å–∏–µ "
                            f"—Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –≥—Ä—É–ø–ø—ã –≤ —Ç–µ—á–µ–Ω–∏–µ {utils.format_time(config.TIME_TO_AGREED)}")
                    await action.answer(text)

            return entities.AvailabilityReport(result=False, delete=in_chat)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º—É—Ç —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    now_time = datetime.datetime.now()
    if user.is_muted():
        # –ï—Å–ª–∏ –º—É—Ç —É–∂–µ –ø—Ä–æ—à–µ–ª, —Ç–æ —Å–Ω–∏–º–∞–µ–º –µ–≥–æ.
        if now_time >= user.muted:
            pass

        else:
            # –í—ã—á–∏—Å–ª—è–µ–º —Å–∫–æ–ª—å–∫–æ –æ—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏ –≤ —á–∞—Å–∞—Ö.
            time_left = utils.format_time(int(user.muted.timestamp() - now_time.timestamp()))

            text = f"üîá –í—ã –≤ –º—É—Ç–µ –µ—â–µ –Ω–∞ {time_left}"
            if call:
                await call.answer(text, show_alert=True)
                return entities.AvailabilityReport(result=False, delete=False)

            if in_chat:
                return entities.AvailabilityReport(result=False, delete=True)
            else:
                await action.answer(text)
                return entities.AvailabilityReport(result=False, delete=False)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —á–∞—Ç–µ, –µ—Å–ª–∏ –ø–∏—à–µ—Ç –≤ –ª—Å.
    if not in_chat and not await user.subscribed(bot):
        text = "‚ùå –Ø –º–æ–≥—É –æ–±—â–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ —á–∞—Ç–∞"
        if call:
            await call.answer(text, show_alert=True)
        else:
            await action.answer(text)

        return entities.AvailabilityReport(result=False)

    return entities.AvailabilityReport(True)
